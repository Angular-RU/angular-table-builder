{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@angular-ru/ng-table-builder/lib/table/interfaces/table-builder.external.ts","ng://@angular-ru/ng-table-builder/lib/table/config/table-builder.tokens.ts","ng://@angular-ru/ng-table-builder/lib/table/interfaces/table-builder.internal.ts","ng://@angular-ru/ng-table-builder/lib/table/services/context-menu/context-menu.interface.ts","ng://@angular-ru/ng-table-builder/lib/table/operators/deep-value.ts","ng://@angular-ru/ng-table-builder/lib/table/services/context-menu/context-menu.service.ts","ng://@angular-ru/ng-table-builder/lib/table/operators/check-value-is-empty.ts","ng://@angular-ru/ng-table-builder/lib/table/services/utils/utils.service.ts","ng://@angular-ru/ng-table-builder/lib/table/operators/detect-changes.ts","ng://@angular-ru/ng-table-builder/lib/table/components/common/modal-view-layer.ts","ng://@angular-ru/ng-table-builder/lib/table/components/ngx-context-menu/ngx-context-menu.component.ts","ng://@angular-ru/ng-table-builder/lib/table/services/filterable/filterable.interface.ts","ng://@angular-ru/ng-table-builder/lib/table/components/common/column-options.ts","ng://@angular-ru/ng-table-builder/lib/table/components/ngx-options/ngx-options.component.ts","ng://@angular-ru/ng-table-builder/lib/table/directives/rows/template-cell.common.ts","ng://@angular-ru/ng-table-builder/lib/table/directives/rows/template-head-th.directive.ts","ng://@angular-ru/ng-table-builder/lib/table/directives/rows/template-body-td.directive.ts","ng://@angular-ru/ng-table-builder/lib/table/components/ngx-column/ngx-column.component.ts","ng://@angular-ru/ng-table-builder/lib/table/config/table-builder-options.ts","ng://@angular-ru/ng-table-builder/lib/table/components/common/table-content.ts","ng://@angular-ru/ng-table-builder/lib/table/components/ngx-header/ngx-header.component.ts","ng://@angular-ru/ng-table-builder/lib/table/components/ngx-footer/ngx-footer.component.ts","ng://@angular-ru/ng-table-builder/lib/table/worker/worker-thread.service.ts","ng://@angular-ru/ng-table-builder/lib/table/services/filterable/filter.worker.ts","ng://@angular-ru/ng-table-builder/lib/table/services/filterable/filterable.service.ts","ng://@angular-ru/ng-table-builder/lib/table/directives/ngx-filter.directive.ts","ng://@angular-ru/ng-table-builder/lib/table/components/ngx-filter/ngx-filter.component.ts","ng://@angular-ru/ng-table-builder/lib/table/table-builder.api.ts","ng://@angular-ru/ng-table-builder/lib/table/operators/is-firefox.ts","ng://@angular-ru/ng-table-builder/lib/table/animations/fade.animation.ts","ng://@angular-ru/ng-table-builder/lib/table/services/template-parser/schema-builder.class.ts","ng://@angular-ru/ng-table-builder/lib/table/services/template-parser/template-parser.service.ts","ng://@angular-ru/ng-table-builder/lib/table/services/sortable/sortable.interfaces.ts","ng://@angular-ru/ng-table-builder/lib/table/services/sortable/sort.worker.ts","ng://@angular-ru/ng-table-builder/lib/table/services/sortable/sortable.service.ts","ng://@angular-ru/ng-table-builder/lib/table/services/selection/selection.ts","ng://@angular-ru/ng-table-builder/lib/table/services/selection/selection-range.ts","ng://@angular-ru/ng-table-builder/lib/table/services/selection/selection.service.ts","ng://@angular-ru/ng-table-builder/lib/table/services/resizer/resizable.service.ts","ng://@angular-ru/ng-table-builder/lib/table/services/draggable/draggable.service.ts","ng://@angular-ru/ng-table-builder/lib/table/services/table-view-changes/ngx-table-view-changes.service.ts","ng://@angular-ru/ng-table-builder/lib/table/services/overload-scroll/overload-scroll.service.ts","ng://@angular-ru/ng-table-builder/lib/table/table-builder.component.ts","ng://@angular-ru/ng-table-builder/lib/table/directives/wheel.directive.ts","ng://@angular-ru/ng-table-builder/lib/table/components/common/table-line-row.ts","ng://@angular-ru/ng-table-builder/lib/table/components/table-thead/table-thead.component.ts","ng://@angular-ru/ng-table-builder/lib/table/components/table-tbody/table-tbody.component.ts","ng://@angular-ru/ng-table-builder/lib/table/directives/auto-height.directive.ts","ng://@angular-ru/ng-table-builder/lib/table/pipes/deep-path.pipe.ts","ng://@angular-ru/ng-table-builder/lib/table/pipes/default-value.pipe.ts","ng://@angular-ru/ng-table-builder/lib/table/components/table-cell/table-cell.component.ts","ng://@angular-ru/ng-table-builder/lib/table/directives/observer-view.directive.ts","ng://@angular-ru/ng-table-builder/lib/table/components/ngx-context-menu/ngx-context-menu-item/ngx-context-menu-item.component.ts","ng://@angular-ru/ng-table-builder/lib/table/components/ngx-context-menu/ngx-context-menu-divider/ngx-context-menu-divider.component.ts","ng://@angular-ru/ng-table-builder/lib/table/components/ngx-context-menu/ngx-context-menu-item/ngx-menu-content-place/ngx-menu-content.component.ts","ng://@angular-ru/ng-table-builder/lib/table/components/ngx-empty/ngx-empty.component.ts","ng://@angular-ru/ng-table-builder/lib/table/components/ngx-filter-viewer/ngx-filter-viewer.component.ts","ng://@angular-ru/ng-table-builder/lib/table/components/drag-icon/drag-icon.component.ts","ng://@angular-ru/ng-table-builder/lib/table/components/ngx-source-null/ngx-source-null.component.ts","ng://@angular-ru/ng-table-builder/lib/table/directives/overflow-tooltip.directive.ts","ng://@angular-ru/ng-table-builder/lib/table-builder.module.ts","ng://@angular-ru/ng-table-builder/lib/table/operators/shallow-update-row.operator.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","r","ar","error","ROW","CELL","NGX_TABLE_OPTIONS","InjectionToken","ID","ContextMenuState","state","opened","position","left","top","key","item","getDeepValue","obj","path","parts","split","index","ContextMenuService","events","Subject","openContextMenu","event","row","clientX","clientY","stopPropagation","preventDefault","close","Injectable","checkValueIsEmpty","isNaN","Infinity","trim","UtilsService","zone","defineProperty","document","querySelector","getBoundingClientRect","replaceUndefinedOrNull","undefined","clone","JSON","parse","stringify","isObject","mergeDeep","target","source","_this","output","keys","forEach","_a","_b","flattenKeysByRow","parentKey","element","isArray","implicitKey","clean","bind","requestAnimationFrame","callback","runOutsideAngular","window","microtask","macrotask","time","setTimeout","SCROLLBAR_WIDTH","NgZone","detectChanges","cd","destroyed","ModalViewLayer","app","utils","ngZone","width","height","isViewed","subscription","overflowX","bodyRect","overflowY","updateView","tick","ngOnDestroy","removeEventListener","unsubscribe","update","preventClose","listenInsideClick","clickListener","origin_1","targetElement","nativeElement","contains","removeListener","taskId","closeTime","addEventListener","clearTimeout","NgxContextMenuComponent","_super","contextMenu","maxHeight","tslib_1.__extends","ngOnInit","subscribe","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ChangeDetectorRef","ApplicationRef","Input","ViewChild","static","START_WITH","END_WITH","CONTAINS","DOES_NOT_CONTAIN","EQUALS","DOES_NOT_EQUAL","FilterStateEvent","ColumnOptions","nowrap","resizable","sortable","filterable","draggable","filterType","NgxOptionsComponent","TemplateCellCommon","type","bold","cssStyles","cssClasses","onClick","EventEmitter","dblClick","Output","TemplateHeadThDirective","Directive","TemplateRef","TemplateBodyTdDirective","NgxColumnComponent","stickyLeft","emptyHead","headTitle","customKey","importantTemplate","stickyRight","verticalLine","withKey","ContentChild","TableBuilderOptionsImpl","wheelMaxDelta","bufferAmount","MACRO_TIME","TIME_RELOAD","COLUMN_RESIZE_MIN_WIDTH","FRAME_TIME","ROW_HEIGHT","TIME_IDLE","TableContent","contentCell","alignCenter","NgxHeaderComponent","NgxFooterComponent","WebWorkerThreadService","workerFunctionToUrlMap","WeakMap","promiseToWorkerMap","createWorkerUrl","resolveString","toString","blob","Blob","URL","createObjectURL","run","workerFunction","data","url","getOrCreateWorkerUrl","runUrl","worker","Worker","promise","createPromiseForWorker","promiseCleaner","createPromiseCleaner","set","catch","terminate","removePromise","getWorker","get","postMessage","fn","has","delete","filterAllWorker","global","types","columns","CONTINUE","BREAK","NEXT","getSatisfies","field","substring","fieldType","satisfies","Terminate","toLocaleLowerCase","startsWith","regexp","RegExp","replace","match","includes","origin","flatten","object","excludeKeys","depthGraph","mutate","flatObject","filter","satisfiesItem","flattenedItem","tslib_1.__values","_c","keyModel","fieldValue","String","_d","globalFilter","isEmpty","matches","values","fieldKey","reduce","str","findKeyValue","multipleFilter","FilterableService","thread","filterValue","definition","TableFilterType","filterOpenEvents","ReplaySubject","filterTypeDefinition","filtering","previousFiltering","changeFilteringStatus","filterValueExist","keyFilterValues","acc","globalFilterValue","openFilter","closeFilter","message","checkIsEmpty","sorted","fireSelection","NgxFilterDirective","NgxFilterComponent","leftX","topY","TableBuilderApiImpl","userAgent","striped","lazy","name","sortTypes","autoWidth","autoHeightDetect","nativeScrollbar","primaryKey","PrimaryKey","columnWidth","rowHeight","asyncColumns","verticalBorder","enableSelection","enableFiltering","schemaColumns","afterRendered","schemaChanges","columnOptions","columnTemplates","contextMenuTemplate","headerTemplate","footerTemplate","filterTemplate","tableViewportChecked","isFrozenView","isFirefoxMode","navigator","toLowerCase","indexOf","modelColumnKeys","customModelColumnsKeys","isDragging","accessDragging","filterIdTask","templateParser","compiledTemplates","columnSchema","column","isVisible","map","schema","selectionModel","entries","selection","parseInt","clientRowHeight","size","recheckViewportChecked","idleDetectChanges","enableDragging","disableDragging","resizeColumn","resize","calculateWidth","afterCalculateWidth","Error","clearInterval","sortAndFilter","reCheckDefinitions","toggleFreeze","originalSource","sort","empty","sortByKey","updateSortKey","drop","previousIndex","currentIndex","previousKey","visibleColumns","currentKey","changeSchema","checkVisible","visible","inViewport","defaultColumns","renderedColumns","exportColumns","viewChanges","emit","getCountKeys","firstItem","generateCustomModelColumnsKeys","excluding","generateModelColumnKeys","onMouseResizeColumn","mutateColumnSchema","some","excludeKey","ContentChildren","NGX_ANIMATION","trigger","style","opacity","transition","animate","SchemaBuilder","isModel","TemplateParserService","templateContext","cell","options","textBold","class","useDeepPath","context","ImplicitContext","getValidPredicate","getValidHtmlBooleanAttribute","attribute","leftPredicate","rightPredicate","toggleColumnVisibility","initialSchema","templateKeys","Set","overrideTemplateKeys","fullTemplateKeys","allowedKeyMap","templates","compileColumnMetadata","add","partialSchema","option","th","td","thTemplate","tdTemplate","isEmptyHead","thOptions","customColumn","cssClass","cssStyle","ASC","DESC","sortWorker","getValueByPath","Sortable","sortByKeys","shallowSort","getMatchesKeys","a","multiSort","countKeys","ix","observeKey","depth","deepSort","OrderType","leftHand","rightHand","val","currentDepth","NaN","count","SortableService","setDefinition","updateImmutableDefinitions","existKey","SortOrderType","SelectionMap","isAll","Map","generateImmutableEntries","from","main","hasValue","select","toggle","clear","SelectionRange","start","end","put","sortKeys","selectedRange","SelectionService","range","selectionStart","status","onChanges","handler","listenShiftKey","listenShiftKeyByType","KeyType","unListenShiftKey","removeListenerByType","toggleAll","rows","selectionTaskIdle","getIdByRow","checkIsAllSelected","selectRow","shiftKey","ctrlKey","findIndex","multipleSelectByShiftKeydown","multipleSelectByCtrlKeydown","singleSelect","id","shiftKeyDetectSelection","ResizableService","clearSelection","getSelection","removeAllRanges","mousemove","mouseup","destroyed$","startX","pageX","startWidth","offsetWidth","fromEvent","pipe","takeUntil","computeEvent","complete","DraggableService","parser","canDropped","moveItemInArray","previous","current","previousIsDraggable","currentIsDraggable","isSticky","NgxTableViewChangesService","providedIn","OverloadScrollService","scrollStatus","TableBuilderComponent","overloadScroll","dirty","rendering","isRendered","contentInit","contentCheck","showedCellByDefault","scrollOffset","offset","recalculated","recalculateHeight","forcedRefresh","destroy$","checkedTaskId","checkSourceIsNull","ngOnChanges","changes","nonIdenticalStructure","sourceExists","renderedCountKeys","sourceIsNull","unDirty","checkFilterValues","markForCheck","renderTable","TableSimpleChanges","currentValue","updateScrollOffset","markVisibleColumn","ngAfterContentInit","markDirtyCheck","markTemplateContentCheck","render","ngAfterViewInit","listenTemplateChanges","listenSelectionChanges","recheckTemplateChanges","listenScrollEvents","ngAfterViewChecked","viewIsDirty","viewForceRefresh","generateColumnsKeyMap","async","columnList","generateDisplayedColumns","drawTask","asyncDrawColumns","syncDrawColumns","emitRendered","resetSchema","scrolling","isScrolling","this_1","mergeColumnSchema","processedColumnList","getCustomColumnSchemaByIndex","defaultColumn","parseTemplateKeys","simpleRenderedKeys","allRenderedKeys","overridingRenderedKeys","providers","animations","WheelThrottlingDirective","overload","scrollTopOffset","wheelThrottling","onElementScroll","$event","scrollStart","scrollTop","scrollEnd","decorators","Inject","TableLineRow","generateTableCellInfo","TableTheadComponent","orderType","TableTbodyComponent","Number","firstChange","scroll","invalidateAllCachedMeasurements","refresh","removeScrollEventHandlers","wrapGroupDimensions","parentScroll","viewPortItems","items","startIndex","scrollLength","checkSelectedItem","handleDblClick","emitter","handleEventEmitter","handleOnClick","vsChange","reloadTaskId","AutoHeightDirective","headerHeight","footerHeight","autoHeight","recalculatedHeight","useOnlyAutoViewPort","sourceLength","detect","paddingTop","getStyle","rootCurrentElement","paddingBottom","columnHeight","parentOffsetHeight","getHeightByViewPort","getDefaultHeight","isEmptyParentHeight","getHeightByParent","HEAD_TOP","clientHeight","DEFAULT_VALUE","currentElement","parentNode","parentElement","strCssRule","strValue","defaultView","getComputedStyle","getPropertyValue","currentStyle","strMatch","p1","toUpperCase","recalculateTableSize","passive","canCalculated","isDirtyCheck","calculateHeight","DELAY","setHeightByParent","scrollbarHeight","childElement","offsetHeight","viewportHeight","autoViewHeight","setAttribute","ElementRef","DeepPathPipe","transform","Pipe","pure","DefaultValuePipe","TableCellComponent","contextType","reattach","loaded","ObserverViewDirective","observeVisible","observer","previousRation","IntersectionObserver","entry","intersectionRatio","isIntersecting","frameId","MIN_TIME_IDLE","root","rootMargin","threshold","observe","disconnect","NgxContextMenuItemComponent","contextTitle","disable","divider","disableSubMenu","subMenuWidth","offsetX","offsetY","itemElement","itemRef","calculateSubMenuPosition","ref","innerHTML","clientRect","MIN_PADDING","emitClick","deferCloseMenu","NgxContextMenuDividerComponent","NgxMenuContentComponent","icon","noMargin","HostBinding","NgxEmptyComponent","NgxFilterViewerComponent","sanitizer","text","founded","wrapSelectedHtml","finder","defaultHtmlValue","changeSelection","selected","escapedValue","trustedHtml","html","bypassSecurityTrustHtml","DomSanitizer","DragIconComponent","NgxSourceNullComponent","OverflowTooltipDirective","parent","textCenter","timeIdle","overflowSelector","checkOverflow","scrollWidth","scrollHeight","detectCheckOverflow","removeElement","showTooltip","overflowContentElem","elem","createElement","rect","classList","cssText","appendChild","removeChild","TableBuilderModule","forRoot","config","ngModule","provide","ROOT_OPTIONS","useValue","useFactory","loggerConfigFactory","deps","NgModule","imports","CommonModule","VirtualScrollerModule","DragDropModule","declarations","exports","concat","__spread","slice"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { EventEmitter, TemplateRef } from '@angular/core';\r\nimport { Any, DeepPartial, KeyMap, TableBrowserEvent } from './table-builder.internal';\r\n\r\nexport type TableRow<T = Any> =\r\n    | Any\r\n    | {\r\n          [key: string]: T;\r\n      };\r\n\r\nexport interface TableBuilderOptions {\r\n    bufferAmount: number;\r\n    wheelMaxDelta: number;\r\n}\r\n\r\nexport enum ImplicitContext {\r\n    ROW = 'ROW',\r\n    CELL = 'CELL'\r\n}\r\n\r\nexport type TableClickEventEmitter = EventEmitter<TableEvent> | null;\r\n\r\nexport interface TableCellOptions<T = Any> {\r\n    class: string | string[] | KeyMap;\r\n    textBold: boolean;\r\n    nowrap: boolean;\r\n    useDeepPath: boolean;\r\n    style: KeyMap;\r\n    width: number;\r\n    height: number;\r\n    template: TemplateRef<T>;\r\n    context: ImplicitContext;\r\n    onClick: EventEmitter<Any>;\r\n    dblClick: EventEmitter<Any>;\r\n}\r\n\r\nexport interface TableHeadCellOptions<T = Any> {\r\n    headTitle: string;\r\n    emptyHead: boolean;\r\n}\r\n\r\nexport interface ColumnsSchema<T = Any> {\r\n    key: string;\r\n    td: TableCellOptions<T>;\r\n    th: TableCellOptions<T> & TableHeadCellOptions;\r\n    width: number;\r\n    cssStyle: string[];\r\n    cssClass: string[];\r\n    stickyLeft: boolean;\r\n    stickyRight: boolean;\r\n    resizable: boolean;\r\n    sortable: boolean;\r\n    filterable: boolean;\r\n    draggable: boolean;\r\n    customColumn: boolean;\r\n    verticalLine: boolean;\r\n    isModel: boolean;\r\n    isVisible: boolean;\r\n}\r\n\r\nexport interface TableUpdateSchema<T = Any> {\r\n    columns: SimpleSchemaColumns;\r\n    name: string | null;\r\n}\r\n\r\nexport interface TableEvent<T = Any> {\r\n    value: T;\r\n    row: TableRow;\r\n    event: TableBrowserEvent;\r\n    preventDefault: () => void;\r\n}\r\n\r\nexport interface ContextItemEvent {\r\n    preventDefault(): void;\r\n}\r\n\r\nexport type SimpleSchemaColumns = Array<DeepPartial<ColumnsSchema>>;\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const NGX_TABLE_OPTIONS: InjectionToken<string> = new InjectionToken('NGX_TABLE_OPTIONS');\r\n","import { QueryList } from '@angular/core';\r\n\r\nexport enum PrimaryKey {\r\n    ID = 'id'\r\n}\r\n\r\nexport enum TableSimpleChanges {\r\n    SOURCE_KEY = 'source',\r\n    SCHEMA_COLUMNS = 'schemaColumns'\r\n}\r\n\r\nexport interface DynamicHeightOptions {\r\n    detect: boolean;\r\n    inViewport: boolean;\r\n    height: number;\r\n    columnHeight: number;\r\n    statusRendered: boolean;\r\n    sourceLength: number;\r\n}\r\n\r\nexport interface ScrollOffsetStatus {\r\n    offset: boolean;\r\n}\r\n\r\nexport interface RecalculatedStatus {\r\n    recalculateHeight: boolean;\r\n}\r\n\r\nexport interface KeyMap<T = Any> {\r\n    [key: string]: T;\r\n}\r\n\r\nexport type RowId = string | number;\r\n\r\nexport type Fn<T = Any, U = Any> = (...args: T[]) => U;\r\n\r\nexport type Any = any; // NOSONAR\r\n\r\nexport interface SelectionStatus {\r\n    status: boolean;\r\n}\r\n\r\nexport enum KeyType {\r\n    KEYDOWN = 'keydown',\r\n    KEYUP = 'keyup'\r\n}\r\n\r\nexport type TableBrowserEvent = Event | MouseEvent | KeyboardEvent;\r\n\r\nexport interface ResizeEvent {\r\n    event: TableBrowserEvent;\r\n    key: string;\r\n}\r\n\r\n// Bug: 'QueryList' is imported from external module '@angular/core' but never used\r\nexport type QueryListRef<T> = QueryList<T>;\r\n\r\nexport interface TemplateKeys {\r\n    allRenderedKeys: string[];\r\n    simpleRenderedKeys: Set<string>;\r\n    overridingRenderedKeys: Set<string>;\r\n}\r\n\r\nexport type Resolver<T> = (value?: T | PromiseLike<T>) => void;\r\n\r\nexport interface MousePosition {\r\n    left: number;\r\n    top: number;\r\n}\r\n\r\nexport type DeepPartial<T = Any> = {\r\n    [P in keyof T]?: T[P] extends Array<infer U>\r\n        ? Array<DeepPartial<U>>\r\n        : T[P] extends ReadonlyArray<infer R>\r\n        ? ReadonlyArray<DeepPartial<R>>\r\n        : DeepPartial<T[P]>;\r\n};\r\n","import { TableRow } from '../../interfaces/table-builder.external';\r\nimport { Any, MousePosition } from '../../interfaces/table-builder.internal';\r\n\r\nexport class ContextMenuState {\r\n    public opened: boolean = false;\r\n    public position: MousePosition = { left: null, top: null };\r\n    public key: string = null;\r\n    public item: TableRow = null;\r\n    public value: Any = null;\r\n\r\n    constructor(state: Partial<ContextMenuState> = null) {\r\n        if (state) {\r\n            this.opened = state.opened;\r\n            this.position = state.position;\r\n            this.key = state.key;\r\n            this.item = state.item;\r\n            this.value = state.value;\r\n        }\r\n    }\r\n}\r\n","import { Any } from '../interfaces/table-builder.internal';\r\n\r\nexport function getDeepValue(obj: Any, path: string): Any {\r\n    if (!(path && path.length)) {\r\n        return obj;\r\n    }\r\n\r\n    const parts: string[] = path.split('.');\r\n    let result: Any = obj;\r\n    let index: number = 0;\r\n\r\n    for (; result && index < parts.length; ++index) {\r\n        result = result[parts[index]];\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { ContextMenuState } from './context-menu.interface';\r\nimport { TableRow } from '../../interfaces/table-builder.external';\r\nimport { getDeepValue } from '../../operators/deep-value';\r\n\r\n@Injectable()\r\nexport class ContextMenuService {\r\n    public state: Partial<ContextMenuState> = {};\r\n    public readonly events: Subject<void> = new Subject();\r\n\r\n    public openContextMenu(event: MouseEvent, key: string = null, row: TableRow = null): void {\r\n        this.state = new ContextMenuState({\r\n            key,\r\n            item: row,\r\n            opened: true,\r\n            value: getDeepValue(row, key) || null,\r\n            position: { left: event.clientX, top: event.clientY }\r\n        });\r\n\r\n        this.events.next();\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    }\r\n\r\n    public close(): void {\r\n        this.state = new ContextMenuState();\r\n        this.events.next();\r\n    }\r\n}\r\n","import { Any } from '../interfaces/table-builder.internal';\r\n\r\nexport function checkValueIsEmpty(value: Any): boolean {\r\n    if (typeof value === 'number') {\r\n        return isNaN(value) || value === Infinity;\r\n    } else if (typeof value === 'string') {\r\n        return value.trim().length === 0;\r\n    } else {\r\n        return !value;\r\n    }\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\nimport { TableRow } from '../../interfaces/table-builder.external';\r\nimport { Any, Fn, KeyMap } from '../../interfaces/table-builder.internal';\r\nimport { UtilsInterface } from './utils.interface';\r\nimport { checkValueIsEmpty } from '../../operators/check-value-is-empty';\r\n\r\n@Injectable()\r\nexport class UtilsService implements UtilsInterface {\r\n    public static readonly SCROLLBAR_WIDTH: number = 10;\r\n\r\n    constructor(private readonly zone: NgZone) {}\r\n\r\n    public get bodyRect(): ClientRect | DOMRect {\r\n        return document.querySelector('body').getBoundingClientRect();\r\n    }\r\n\r\n    private static replaceUndefinedOrNull(_: string, value: unknown): unknown {\r\n        return checkValueIsEmpty(value) ? undefined : value;\r\n    }\r\n\r\n    public clone<T = Any>(obj: T): T {\r\n        return JSON.parse(JSON.stringify(obj || null)) || {};\r\n    }\r\n\r\n    public isObject<T = object>(obj: T): boolean {\r\n        return obj === Object(obj);\r\n    }\r\n\r\n    public mergeDeep<T>(target: T, source: T): T {\r\n        const output: T = { ...target };\r\n        if (this.isObject(target) && this.isObject(source)) {\r\n            Object.keys(source).forEach((key: string) => {\r\n                if (this.isObject(source[key])) {\r\n                    if (!(key in target)) {\r\n                        Object.assign(output, { [key]: source[key] });\r\n                    } else {\r\n                        output[key] = this.mergeDeep(target[key], source[key]);\r\n                    }\r\n                } else {\r\n                    Object.assign(output, { [key]: source[key] });\r\n                }\r\n            });\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    public flattenKeysByRow(row: TableRow, parentKey: string = null, keys: string[] = []): string[] {\r\n        for (const key in row) {\r\n            if (!row.hasOwnProperty(key)) {\r\n                continue;\r\n            }\r\n\r\n            const element: Any = row[key];\r\n            const isObject: boolean = typeof element === 'object' && element !== null && !Array.isArray(element);\r\n\r\n            if (isObject) {\r\n                const implicitKey: string = parentKey ? `${parentKey}.${key}` : key;\r\n                this.flattenKeysByRow(row[key], implicitKey, keys);\r\n            } else {\r\n                keys.push(parentKey ? `${parentKey}.${key}` : key);\r\n            }\r\n        }\r\n\r\n        return keys;\r\n    }\r\n\r\n    public clean(obj: KeyMap): KeyMap {\r\n        return JSON.parse(JSON.stringify(obj, UtilsService.replaceUndefinedOrNull.bind(this)));\r\n    }\r\n\r\n    public requestAnimationFrame(callback: Fn): Promise<void> {\r\n        return new Promise((resolve: Fn): void => {\r\n            this.zone.runOutsideAngular(() => {\r\n                window.requestAnimationFrame(() => {\r\n                    callback();\r\n                    resolve();\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public microtask(callback: Fn): Promise<void> {\r\n        return new Promise((resolve: Fn): void => {\r\n            callback();\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    public macrotask(callback: Fn, time: number = 0): Promise<void> {\r\n        return new Promise((resolve: Fn): void => {\r\n            this.zone.runOutsideAngular(() => {\r\n                window.setTimeout(() => {\r\n                    callback();\r\n                    resolve();\r\n                }, time);\r\n            });\r\n        });\r\n    }\r\n}\r\n","import { ChangeDetectorRef, ViewRef } from '@angular/core';\r\n\r\nexport function detectChanges(cd: ChangeDetectorRef): void {\r\n    if (!(cd as ViewRef).destroyed) {\r\n        cd.detectChanges();\r\n    }\r\n}\r\n","import { ApplicationRef, ChangeDetectorRef, ElementRef, NgZone, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { UtilsService } from '../../services/utils/utils.service';\r\nimport { Fn, MousePosition } from '../../interfaces/table-builder.internal';\r\nimport { detectChanges } from '../../operators/detect-changes';\r\n\r\nexport interface PositionState {\r\n    key: string;\r\n    opened: boolean;\r\n    position: MousePosition;\r\n}\r\n\r\nexport abstract class ModalViewLayer<T extends PositionState> implements OnDestroy {\r\n    public width: number = null;\r\n    public height: number = null;\r\n    public isViewed: boolean = false;\r\n    public abstract closeTime: number;\r\n    protected subscription: Subscription = null;\r\n    protected abstract targetElement: ElementRef<HTMLDivElement>;\r\n    protected taskId: number;\r\n    private clickListener: Fn;\r\n\r\n    protected constructor(\r\n        protected readonly cd: ChangeDetectorRef,\r\n        protected readonly app: ApplicationRef,\r\n        protected readonly utils: UtilsService,\r\n        protected readonly ngZone: NgZone\r\n    ) {}\r\n\r\n    public get left(): number {\r\n        return (this.state.position && this.state.position.left) || 0;\r\n    }\r\n\r\n    public get top(): number {\r\n        return (this.state.position && this.state.position.top) || 0;\r\n    }\r\n\r\n    public get overflowX(): number {\r\n        const overflowX: number = this.width + this.left - this.utils.bodyRect.width;\r\n        return overflowX > 0 ? overflowX + UtilsService.SCROLLBAR_WIDTH : 0;\r\n    }\r\n\r\n    public get overflowY(): number {\r\n        const overflowY: number = this.height + this.top - this.utils.bodyRect.height;\r\n        return overflowY > 0 ? overflowY + UtilsService.SCROLLBAR_WIDTH : 0;\r\n    }\r\n\r\n    public abstract get state(): Partial<T>;\r\n\r\n    public abstract close(event: MouseEvent): void;\r\n\r\n    public updateView(): void {\r\n        this.cd.detectChanges();\r\n        this.app.tick();\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.removeEventListener();\r\n        this.subscription.unsubscribe();\r\n    }\r\n\r\n    protected update(): void {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            window.setTimeout(() => {\r\n                this.isViewed = this.state.opened;\r\n                this.updateView();\r\n\r\n                if (this.state.opened) {\r\n                    this.removeEventListener();\r\n                    this.preventClose();\r\n                    this.listenInsideClick();\r\n                }\r\n\r\n                window.setTimeout(() => this.updateView());\r\n            });\r\n        });\r\n    }\r\n\r\n    private listenInsideClick(): void {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.clickListener = (event: MouseEvent): void => {\r\n                try {\r\n                    const origin: Node = this.targetElement.nativeElement;\r\n                    const target: Node = event.target as Node;\r\n                    if (!origin.contains(target)) {\r\n                        this.removeListener(event);\r\n                        this.taskId = window.setTimeout(() => this.removeListener(event), this.closeTime);\r\n                    }\r\n                } catch (e) {\r\n                    this.removeEventListener();\r\n                }\r\n            };\r\n\r\n            window.addEventListener('mousedown', this.clickListener, true);\r\n        });\r\n    }\r\n\r\n    private removeListener(event: MouseEvent): void {\r\n        this.removeEventListener();\r\n        this.close(event);\r\n        detectChanges(this.cd);\r\n    }\r\n\r\n    private removeEventListener(): void {\r\n        window.removeEventListener('mousedown', this.clickListener, true);\r\n    }\r\n\r\n    public preventClose(): void {\r\n        window.clearTimeout(this.taskId);\r\n    }\r\n}\r\n","import {\n    ApplicationRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    Input,\n    NgZone,\n    OnInit,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { ContextMenuService } from '../../services/context-menu/context-menu.service';\nimport { ContextMenuState } from '../../services/context-menu/context-menu.interface';\nimport { UtilsService } from '../../services/utils/utils.service';\nimport { ModalViewLayer } from '../common/modal-view-layer';\n\n// @dynamic\n@Component({\n    selector: 'ngx-context-menu',\n    templateUrl: './ngx-context-menu.component.html',\n    styleUrls: ['./ngx-context-menu.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxContextMenuComponent extends ModalViewLayer<ContextMenuState> implements OnInit {\n    @Input() public width: number = 300;\n    @Input() public height: number = 300;\n    @Input('max-height') public maxHeight: number = 400;\n    public closeTime: number = 0;\n\n    @ViewChild('targetElement', { static: false })\n    protected targetElement: ElementRef<HTMLDivElement>;\n\n    constructor(\n        private readonly contextMenu: ContextMenuService,\n        protected readonly cd: ChangeDetectorRef,\n        protected readonly app: ApplicationRef,\n        protected readonly utils: UtilsService,\n        protected readonly ngZone: NgZone\n    ) {\n        super(cd, app, utils, ngZone);\n    }\n\n    public get state(): Partial<ContextMenuState> {\n        return this.contextMenu.state;\n    }\n\n    public ngOnInit(): void {\n        this.subscription = this.contextMenu.events.subscribe(() => this.update());\n    }\n\n    public close(event: MouseEvent): void {\n        this.contextMenu.close();\n        event.preventDefault();\n    }\n}\n","import { TableRow } from '../../interfaces/table-builder.external';\r\nimport { Fn, KeyMap, MousePosition } from '../../interfaces/table-builder.internal';\r\n\r\nexport interface FilterGlobalOpts {\r\n    value: string;\r\n    type: TableFilterType;\r\n}\r\n\r\nexport interface FilterColumnsOpts {\r\n    isEmpty: boolean;\r\n    values: KeyMap<string>;\r\n    types: KeyMap<TableFilterType>;\r\n}\r\n\r\nexport interface FilterableMessage {\r\n    source: TableRow[];\r\n    types: typeof TableFilterType;\r\n    global: FilterGlobalOpts;\r\n    columns: FilterColumnsOpts;\r\n}\r\n\r\nexport enum TableFilterType {\r\n    START_WITH = 'START_WITH',\r\n    END_WITH = 'END_WITH',\r\n    CONTAINS = 'CONTAINS',\r\n    DOES_NOT_CONTAIN = 'DOES_NOT_CONTAIN',\r\n    EQUALS = 'EQUALS',\r\n    DOES_NOT_EQUAL = 'DOES_NOT_EQUAL'\r\n}\r\n\r\nexport interface FilterEvent {\r\n    value: string;\r\n    type: TableFilterType;\r\n}\r\n\r\nexport class FilterStateEvent {\r\n    public key: string = null;\r\n    public opened: boolean = null;\r\n    public position: MousePosition = { left: null, top: null };\r\n}\r\n\r\nexport interface FilterWorkerEvent {\r\n    source: TableRow[];\r\n    fireSelection: Fn;\r\n}\r\n","import { Input } from '@angular/core';\r\nimport { TableFilterType } from '../../services/filterable/filterable.interface';\r\n\r\nexport class ColumnOptions {\r\n    @Input() public nowrap: boolean = null;\r\n    @Input() public width: number = null;\r\n    @Input() public resizable: boolean = null;\r\n    @Input() public sortable: boolean = null;\r\n    @Input() public filterable: boolean = null;\r\n    @Input() public draggable: boolean = null;\r\n    @Input('filter-type') public filterType: TableFilterType = null;\r\n    @Input('css-class') public cssClass: string[];\r\n    @Input('css-style') public cssStyle: string[];\r\n}\r\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\r\nimport { ColumnOptions } from '../common/column-options';\r\n\r\n@Component({\r\n    selector: 'ngx-options',\r\n    templateUrl: './ngx-options.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxOptionsComponent extends ColumnOptions {}\r\n","import { EventEmitter, Input, Output, TemplateRef } from '@angular/core';\r\nimport { Any, KeyMap } from '../../interfaces/table-builder.internal';\r\nimport { TableEvent } from '../../interfaces/table-builder.external';\r\n\r\nexport abstract class TemplateCellCommon {\r\n    public type: string = null;\r\n    @Input() public row: boolean = null;\r\n    @Input() public bold: boolean = null;\r\n    @Input() public nowrap: boolean = true;\r\n    @Input() public width: number = null;\r\n    @Input() public height: number = null;\r\n    @Input('ng-style') public cssStyles: KeyMap = null;\r\n    @Input('ng-class') public cssClasses: string | string[] | KeyMap = null;\r\n    @Output() public onClick: EventEmitter<TableEvent> = new EventEmitter();\r\n    @Output() public dblClick: EventEmitter<TableEvent> = new EventEmitter();\r\n    protected constructor(public template: TemplateRef<unknown>) {}\r\n}\r\n","import { Directive, Input, TemplateRef } from '@angular/core';\r\nimport { TemplateCellCommon } from './template-cell.common';\r\n\r\n@Directive({ selector: 'ng-template[ngx-th]' })\r\nexport class TemplateHeadThDirective extends TemplateCellCommon {\r\n    @Input('ngx-th') public type: string = null;\r\n    public nowrap: boolean = false;\r\n\r\n    constructor(public template: TemplateRef<unknown>) {\r\n        super(template);\r\n        this.bold = true;\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef } from '@angular/core';\r\nimport { TemplateCellCommon } from './template-cell.common';\r\n\r\n@Directive({ selector: 'ng-template[ngx-td]' })\r\nexport class TemplateBodyTdDirective extends TemplateCellCommon {\r\n    @Input('ngx-td') public type: string = null;\r\n    constructor(public template: TemplateRef<unknown>) {\r\n        super(template);\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, ContentChild, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TemplateHeadThDirective } from '../../directives/rows/template-head-th.directive';\r\nimport { TemplateBodyTdDirective } from '../../directives/rows/template-body-td.directive';\r\nimport { ColumnOptions } from '../common/column-options';\r\n\r\n@Component({\r\n    selector: 'ngx-column',\r\n    templateUrl: './ngx-column.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxColumnComponent extends ColumnOptions {\r\n    @Input() public key: string = null;\r\n    @Input('sticky') public stickyLeft: boolean = false;\r\n    @Input('empty-head') public emptyHead: boolean = null;\r\n    @Input('head-title') public headTitle: string = null;\r\n    @Input('custom-key') public customKey: boolean = false;\r\n    @Input('important-template') public importantTemplate: boolean = false;\r\n    @Input('sticky-end') public stickyRight: boolean = false;\r\n    @Input('vertical-line') public verticalLine: boolean = false;\r\n    @ContentChild(TemplateHeadThDirective, { static: false }) public th: TemplateHeadThDirective;\r\n    @ContentChild(TemplateBodyTdDirective, { static: false }) public td: TemplateBodyTdDirective;\r\n\r\n    public withKey(key: string): NgxColumnComponent {\r\n        this.key = key;\r\n        return this;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TableBuilderOptions } from '../interfaces/table-builder.external';\r\n\r\n@Injectable()\r\nexport class TableBuilderOptionsImpl implements TableBuilderOptions {\r\n    public static readonly MACRO_TIME: number = 1000;\r\n    public static readonly TIME_RELOAD: number = 400;\r\n    public static readonly COLUMN_RESIZE_MIN_WIDTH: number = 50;\r\n    public static readonly FRAME_TIME: number = 66;\r\n    public static readonly ROW_HEIGHT: number = 45;\r\n    public static readonly TIME_IDLE: number = 200;\r\n    public wheelMaxDelta: number = 300;\r\n    public bufferAmount: number = 0;\r\n}\r\n","import { Input } from '@angular/core';\r\nimport { TableBuilderOptionsImpl } from '../../config/table-builder-options';\r\n\r\nexport class TableContent {\r\n    @Input() public height: number = TableBuilderOptionsImpl.ROW_HEIGHT;\r\n    @Input('content-cell') public contentCell: boolean = null;\r\n    @Input('align-center') public alignCenter: boolean = null;\r\n    @Input('css-class') public cssClasses: string[] = null;\r\n    @Input() public bold: boolean = null;\r\n}\r\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { TableContent } from '../common/table-content';\n\n@Component({\n    selector: 'ngx-header',\n    templateUrl: './ngx-header.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxHeaderComponent extends TableContent {}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\nimport { TableContent } from '../common/table-content';\n\n@Component({\n    selector: 'ngx-footer',\n    templateUrl: './ngx-footer.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxFooterComponent extends TableContent {}\n","import { Injectable } from '@angular/core';\r\nimport { Executor, WebWorkerThread } from './worker-thread.interface';\r\nimport { Any, Fn } from '../interfaces/table-builder.internal';\r\n\r\n@Injectable()\r\nexport class WebWorkerThreadService implements WebWorkerThread {\r\n    private readonly workerFunctionToUrlMap: WeakMap<Fn, string> = new WeakMap();\r\n    private readonly promiseToWorkerMap: WeakMap<Promise<Any>, Worker> = new WeakMap();\r\n\r\n    private static createWorkerUrl(resolve: Fn): string {\r\n        const resolveString: string = resolve.toString();\r\n\r\n        const webWorkerTemplate: string = `\r\n            self.addEventListener('message', function(e) {\r\n                postMessage((${resolveString})(e.data));\r\n            });\r\n        `;\r\n\r\n        const blob: Blob = new Blob([webWorkerTemplate], { type: 'text/javascript' });\r\n        return URL.createObjectURL(blob);\r\n    }\r\n\r\n    public run<T, K>(workerFunction: (input: K) => T, data?: K): Promise<T> {\r\n        const url: string = this.getOrCreateWorkerUrl(workerFunction);\r\n        return this.runUrl(url, data);\r\n    }\r\n\r\n    public runUrl(url: string, data?: Any): Promise<Any> {\r\n        const worker: Worker = new Worker(url);\r\n        const promise: Promise<Any> = this.createPromiseForWorker(worker, data);\r\n        const promiseCleaner: Any = this.createPromiseCleaner(promise);\r\n\r\n        this.promiseToWorkerMap.set(promise, worker);\r\n\r\n        promise.then(promiseCleaner).catch(promiseCleaner);\r\n\r\n        return promise;\r\n    }\r\n\r\n    public terminate<T>(promise: Promise<T>): Promise<T> {\r\n        return this.removePromise(promise);\r\n    }\r\n\r\n    public getWorker(promise: Promise<Any>): Worker {\r\n        return this.promiseToWorkerMap.get(promise);\r\n    }\r\n\r\n    private createPromiseForWorker<T>(worker: Worker, data: Any): Promise<T> {\r\n        return new Promise<T>((resolve: Executor<Any>, reject: Executor<Any>): void => {\r\n            worker.addEventListener('message', (event: MessageEvent) => resolve(event.data));\r\n            worker.addEventListener('error', reject);\r\n            worker.postMessage(data);\r\n        });\r\n    }\r\n\r\n    private getOrCreateWorkerUrl(fn: Fn): string {\r\n        if (!this.workerFunctionToUrlMap.has(fn)) {\r\n            const url: string = WebWorkerThreadService.createWorkerUrl(fn);\r\n            this.workerFunctionToUrlMap.set(fn, url);\r\n            return url;\r\n        }\r\n        return this.workerFunctionToUrlMap.get(fn);\r\n    }\r\n\r\n    private createPromiseCleaner<T>(promise: Promise<T>): (input: Any) => T {\r\n        return (event: T): T => {\r\n            this.removePromise(promise);\r\n            return event;\r\n        };\r\n    }\r\n\r\n    private removePromise<T>(promise: Promise<T>): Promise<T> {\r\n        const worker: Worker = this.promiseToWorkerMap.get(promise);\r\n\r\n        if (worker) {\r\n            worker.terminate();\r\n        }\r\n\r\n        this.promiseToWorkerMap.delete(promise);\r\n        return promise;\r\n    }\r\n}\r\n","import { FilterableMessage, FilterGlobalOpts, TableFilterType } from './filterable.interface';\r\nimport { TableRow } from '../../interfaces/table-builder.external';\r\nimport { KeyMap } from '../../interfaces/table-builder.internal';\r\n\r\nexport function filterAllWorker({ source, global, types, columns }: FilterableMessage): TableRow[] {\r\n    enum Terminate {\r\n        CONTINUE = -1,\r\n        BREAK = 0,\r\n        NEXT = 1\r\n    }\r\n\r\n    const { value, type }: FilterGlobalOpts = global;\r\n    let result: TableRow[] = source;\r\n\r\n    if (value) {\r\n        result = source.filter((item: TableRow) => {\r\n            return type === types.DOES_NOT_CONTAIN ? !includes(JSON.stringify(item), value) : globalFilter(item);\r\n        });\r\n    }\r\n\r\n    if (!columns.isEmpty) {\r\n        result = result.filter((item: TableRow) => multipleFilter(item));\r\n    }\r\n\r\n    function globalFilter(item: TableRow): boolean {\r\n        let satisfiesItem: boolean = false;\r\n        const flattenedItem: KeyMap = flatten(item);\r\n\r\n        for (const keyModel of Object.keys(flattenedItem)) {\r\n            const fieldValue: string = String(flattenedItem[keyModel]);\r\n            const [terminate, satisfies]: Satisfies = getSatisfies(fieldValue, value, type);\r\n\r\n            satisfiesItem = satisfies;\r\n\r\n            if (terminate === Terminate.CONTINUE) {\r\n                continue;\r\n            } else if (terminate === Terminate.BREAK) {\r\n                break;\r\n            }\r\n\r\n            if (satisfiesItem) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return satisfiesItem;\r\n    }\r\n\r\n    function multipleFilter(item: TableRow): boolean {\r\n        let matches: boolean = true;\r\n\r\n        for (const fieldKey of Object.keys(columns.values)) {\r\n            const fieldValue: string = String(getValueByPath(item, fieldKey) || '').trim();\r\n            const findKeyValue: string = String(columns.values[fieldKey]);\r\n            const fieldType: TableFilterType = columns.types[fieldKey];\r\n            const [terminate, satisfies]: Satisfies = getSatisfies(fieldValue, findKeyValue, fieldType);\r\n            matches = matches && satisfies;\r\n\r\n            if (!matches || terminate === Terminate.BREAK) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return matches;\r\n    }\r\n\r\n    type Satisfies = [Terminate, boolean];\r\n\r\n    function getSatisfies(field: string, substring: string, fieldType: TableFilterType): Satisfies {\r\n        let satisfies: boolean = false;\r\n        let terminate: Terminate = Terminate.NEXT;\r\n\r\n        if (fieldType === types.START_WITH) {\r\n            satisfies = field.toLocaleLowerCase().startsWith(substring.toLocaleLowerCase());\r\n        } else if (fieldType === types.END_WITH) {\r\n            const regexp: RegExp = new RegExp(`${escaped(substring)}$`);\r\n            satisfies = !!field.match(regexp);\r\n        } else if (fieldType === types.CONTAINS) {\r\n            satisfies = includes(field, substring);\r\n        } else if (fieldType === types.EQUALS) {\r\n            satisfies = field === substring;\r\n        } else if (fieldType === types.DOES_NOT_EQUAL) {\r\n            if (field !== substring) {\r\n                satisfies = true;\r\n                terminate = Terminate.CONTINUE;\r\n            } else {\r\n                satisfies = false;\r\n                terminate = Terminate.BREAK;\r\n            }\r\n        }\r\n\r\n        return [terminate, satisfies];\r\n    }\r\n\r\n    function includes(origin: string, substring: string): boolean {\r\n        return origin.toLocaleLowerCase().includes(substring.toLocaleLowerCase());\r\n    }\r\n\r\n    function escaped(escapedValue: string): string {\r\n        return escapedValue.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n    }\r\n\r\n    function flatten<T = string>(object: KeyMap, excludeKeys: string[] = []): KeyMap<T> {\r\n        const depthGraph: KeyMap<T> = {};\r\n\r\n        for (const key in object) {\r\n            if (object.hasOwnProperty(key) && !excludeKeys.includes(key)) {\r\n                mutate<T>(object, depthGraph, key);\r\n            }\r\n        }\r\n\r\n        return depthGraph;\r\n    }\r\n\r\n    function getValueByPath(object: KeyMap, path: string): KeyMap | undefined {\r\n        return path ? path.split('.').reduce((str: string, key: string) => str && str[key], object) : object;\r\n    }\r\n\r\n    function mutate<T>(object: KeyMap, depthGraph: KeyMap<T>, key: string): void {\r\n        const isObject: boolean = typeof object[key] === 'object' && object[key] !== null;\r\n        if (isObject) {\r\n            const flatObject: KeyMap = flatten(object[key]);\r\n            for (const path in flatObject) {\r\n                if (flatObject.hasOwnProperty(path)) {\r\n                    depthGraph[`${key}.${path}`] = flatObject[path];\r\n                }\r\n            }\r\n        } else {\r\n            depthGraph[key] = object[key];\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n","import { ApplicationRef, Injectable, NgZone } from '@angular/core';\r\nimport { ReplaySubject, Subject } from 'rxjs';\r\n\r\nimport { WebWorkerThreadService } from '../../worker/worker-thread.service';\r\nimport { UtilsService } from '../utils/utils.service';\r\nimport { TableRow } from '../../interfaces/table-builder.external';\r\nimport { TableBuilderOptionsImpl } from '../../config/table-builder-options';\r\nimport {\r\n    FilterableMessage,\r\n    FilterEvent,\r\n    FilterStateEvent,\r\n    TableFilterType,\r\n    FilterWorkerEvent\r\n} from './filterable.interface';\r\nimport { filterAllWorker } from './filter.worker';\r\nimport { KeyMap, Resolver } from '../../interfaces/table-builder.internal';\r\n\r\nconst { TIME_IDLE }: typeof TableBuilderOptionsImpl = TableBuilderOptionsImpl;\r\n\r\n@Injectable()\r\nexport class FilterableService {\r\n    public filterValue: string = null;\r\n    public definition: KeyMap<string> = {};\r\n    public state: FilterStateEvent = new FilterStateEvent();\r\n    public types: typeof TableFilterType = TableFilterType;\r\n    public readonly filterOpenEvents: Subject<void> = new Subject();\r\n    public readonly events: Subject<FilterEvent> = new ReplaySubject();\r\n    public filterType: TableFilterType;\r\n    public filterTypeDefinition: KeyMap<TableFilterType> = {};\r\n    public filtering: boolean = false;\r\n    private previousFiltering: boolean = false;\r\n\r\n    constructor(\r\n        private readonly thread: WebWorkerThreadService,\r\n        private readonly utils: UtilsService,\r\n        private readonly ngZone: NgZone,\r\n        private readonly app: ApplicationRef\r\n    ) {}\r\n\r\n    public get globalFilterValue(): string {\r\n        return this.filterValue ? String(this.filterValue).trim() : null;\r\n    }\r\n\r\n    public changeFilteringStatus(): void {\r\n        this.filtering = this.filterValueExist;\r\n\r\n        if (this.filtering !== this.previousFiltering) {\r\n            this.events.next({ value: null, type: null });\r\n        }\r\n\r\n        this.previousFiltering = this.filtering;\r\n    }\r\n\r\n    public get filterValueExist(): boolean {\r\n        const keyFilterValues: string = Object.values(this.definition).reduce(\r\n            (acc: string, next: string) => acc + next,\r\n            ''\r\n        );\r\n        return (this.globalFilterValue && this.globalFilterValue.length > 0) || keyFilterValues.length > 0;\r\n    }\r\n\r\n    public openFilter(key: string, event: MouseEvent): void {\r\n        this.state = { opened: true, key, position: { left: event.clientX, top: event.clientY } };\r\n        this.filterOpenEvents.next();\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    }\r\n\r\n    public closeFilter(): void {\r\n        this.state = new FilterStateEvent();\r\n        this.filterOpenEvents.next();\r\n    }\r\n\r\n    public filter(source: TableRow[]): Promise<FilterWorkerEvent> {\r\n        const type: TableFilterType = this.filterType;\r\n        const value: string = this.globalFilterValue ? String(this.globalFilterValue).trim() : null;\r\n\r\n        return new Promise((resolve: Resolver<FilterWorkerEvent>): void => {\r\n            const message: FilterableMessage = {\r\n                source,\r\n                types: TableFilterType,\r\n                global: { value, type },\r\n                columns: {\r\n                    values: this.definition,\r\n                    types: this.filterTypeDefinition,\r\n                    isEmpty: this.checkIsEmpty(this.definition)\r\n                }\r\n            };\r\n\r\n            this.thread.run<TableRow[], FilterableMessage>(filterAllWorker, message).then((sorted: TableRow[]) => {\r\n                this.ngZone.runOutsideAngular(() =>\r\n                    window.setTimeout(() => {\r\n                        resolve({\r\n                            source: sorted,\r\n                            fireSelection: (): void => {\r\n                                window.setTimeout(() => {\r\n                                    this.events.next({ value, type });\r\n                                    this.app.tick();\r\n                                }, TIME_IDLE);\r\n                            }\r\n                        });\r\n                    }, TIME_IDLE)\r\n                );\r\n            });\r\n        });\r\n    }\r\n\r\n    private checkIsEmpty(definition: KeyMap<string>): boolean {\r\n        return Object.keys(this.utils.clean(definition)).length === 0;\r\n    }\r\n}\r\n","import { Directive, Input, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: 'ng-template[ngx-filter]' })\r\nexport class NgxFilterDirective {\r\n    @Input('ngx-filter') public type: string = null;\r\n    constructor(public template: TemplateRef<unknown>) {}\r\n}\r\n","import {\n    ApplicationRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ElementRef,\n    Input,\n    NgZone,\n    OnInit,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FilterableService } from '../../services/filterable/filterable.service';\nimport { FilterStateEvent } from '../../services/filterable/filterable.interface';\nimport { ModalViewLayer } from '../common/modal-view-layer';\nimport { UtilsService } from '../../services/utils/utils.service';\nimport { NgxFilterDirective } from '../../directives/ngx-filter.directive';\n\n@Component({\n    selector: 'ngx-filter',\n    templateUrl: './ngx-filter.component.html',\n    styleUrls: ['./ngx-filter.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxFilterComponent extends ModalViewLayer<FilterStateEvent> implements OnInit {\n    @Input() public width: number = 300;\n    @Input() public height: number = null;\n    @Input('max-height') public maxHeight: number = null;\n    public closeTime: number = 150;\n    public readonly leftX: number = 10;\n    public readonly topY: number = 50;\n\n    @ContentChild(NgxFilterDirective, { static: false })\n    public filter: NgxFilterDirective;\n\n    @ViewChild('targetElement', { static: false })\n    protected targetElement: ElementRef<HTMLDivElement>;\n\n    constructor(\n        private readonly filterable: FilterableService,\n        protected readonly cd: ChangeDetectorRef,\n        protected readonly app: ApplicationRef,\n        protected readonly utils: UtilsService,\n        protected readonly ngZone: NgZone\n    ) {\n        super(cd, app, utils, ngZone);\n    }\n\n    public get state(): Partial<FilterStateEvent> {\n        return this.filterable.state;\n    }\n\n    public close(event: MouseEvent): void {\n        this.filterable.closeFilter();\n        event.preventDefault();\n    }\n\n    public ngOnInit(): void {\n        this.subscription = this.filterable.filterOpenEvents.subscribe(() => this.update());\n    }\n}\n","import { CdkDragSortEvent } from '@angular/cdk/drag-drop';\r\nimport {\r\n    AfterContentInit,\r\n    AfterViewChecked,\r\n    AfterViewInit,\r\n    ApplicationRef,\r\n    ChangeDetectorRef,\r\n    ContentChild,\r\n    ContentChildren,\r\n    EventEmitter,\r\n    Input,\r\n    NgZone,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewRef\r\n} from '@angular/core';\r\n\r\nimport { NgxTableViewChangesService } from '../table/services/table-view-changes/ngx-table-view-changes.service';\r\nimport { Fn, KeyMap, PrimaryKey, QueryListRef, ResizeEvent } from './interfaces/table-builder.internal';\r\nimport { ColumnsSchema, SimpleSchemaColumns, TableRow } from './interfaces/table-builder.external';\r\nimport { NgxContextMenuComponent } from './components/ngx-context-menu/ngx-context-menu.component';\r\nimport { TemplateParserService } from './services/template-parser/template-parser.service';\r\nimport { NgxOptionsComponent } from './components/ngx-options/ngx-options.component';\r\nimport { NgxColumnComponent } from './components/ngx-column/ngx-column.component';\r\nimport { ContextMenuService } from './services/context-menu/context-menu.service';\r\nimport { NgxHeaderComponent } from './components/ngx-header/ngx-header.component';\r\nimport { NgxFooterComponent } from './components/ngx-footer/ngx-footer.component';\r\nimport { NgxFilterComponent } from './components/ngx-filter/ngx-filter.component';\r\nimport { FilterWorkerEvent } from './services/filterable/filterable.interface';\r\nimport { DraggableService } from './services/draggable/draggable.service';\r\nimport { FilterableService } from './services/filterable/filterable.service';\r\nimport { SelectionService } from './services/selection/selection.service';\r\nimport { TableBuilderOptionsImpl } from './config/table-builder-options';\r\nimport { ResizableService } from './services/resizer/resizable.service';\r\nimport { SortableService } from './services/sortable/sortable.service';\r\nimport { UtilsService } from './services/utils/utils.service';\r\nimport { SelectionMap } from './services/selection/selection';\r\nimport { isFirefox } from './operators/is-firefox';\r\n\r\nconst { ROW_HEIGHT, MACRO_TIME, TIME_IDLE }: typeof TableBuilderOptionsImpl = TableBuilderOptionsImpl;\r\n\r\nexport abstract class TableBuilderApiImpl\r\n    implements OnChanges, OnInit, AfterViewInit, AfterContentInit, AfterViewChecked, OnDestroy {\r\n    @Input() public height: number;\r\n    @Input() public width: string;\r\n    @Input() public source: TableRow[] = null;\r\n    @Input() public keys: string[] = [];\r\n    @Input() public striped: boolean = true;\r\n    @Input() public lazy: boolean = true;\r\n    @Input() public name: string = null;\r\n    @Input('sort-types') public sortTypes: KeyMap = null;\r\n    @Input('exclude-keys') public excludeKeys: Array<string | RegExp> = [];\r\n    @Input('auto-width') public autoWidth: boolean = false;\r\n    @Input('auto-height') public autoHeightDetect: boolean = true;\r\n    @Input('native-scrollbar') public nativeScrollbar: boolean = false;\r\n    @Input('primary-key') public primaryKey: string = PrimaryKey.ID;\r\n    @Input('column-width') public columnWidth: string | number = null;\r\n    @Input('row-height') public rowHeight: string | number = null;\r\n    @Input('async-columns') public asyncColumns: boolean = true;\r\n    @Input('vertical-border') public verticalBorder: boolean = true;\r\n    @Input('enable-selection') public enableSelection: boolean = false;\r\n    @Input('enable-filtering') public enableFiltering: boolean = false;\r\n    @Input('buffer-amount') public bufferAmount: number = null;\r\n    @Input('schema-columns') public schemaColumns: SimpleSchemaColumns = [];\r\n    @Output() public afterRendered: EventEmitter<boolean> = new EventEmitter();\r\n    @Output() public schemaChanges: EventEmitter<SimpleSchemaColumns> = new EventEmitter();\r\n\r\n    @ContentChild(NgxOptionsComponent, { static: false })\r\n    public columnOptions: NgxOptionsComponent = null;\r\n\r\n    @ContentChildren(NgxColumnComponent)\r\n    public columnTemplates: QueryListRef<NgxColumnComponent> = null;\r\n\r\n    @ContentChild(NgxContextMenuComponent, { static: false })\r\n    public contextMenuTemplate: NgxContextMenuComponent = null;\r\n\r\n    @ContentChild(NgxHeaderComponent, { static: false })\r\n    public headerTemplate: NgxHeaderComponent = null;\r\n\r\n    @ContentChild(NgxFooterComponent, { static: false })\r\n    public footerTemplate: NgxFooterComponent = null;\r\n\r\n    @ContentChild(NgxFilterComponent, { static: false })\r\n    public filterTemplate: NgxFilterComponent = null;\r\n\r\n    public inViewport: boolean;\r\n    public tableViewportChecked: boolean = true;\r\n    public isFrozenView: boolean = false;\r\n    public isFirefoxMode: boolean = isFirefox();\r\n\r\n    /**\r\n     * @description: the custom names of the column list to be displayed in the view.\r\n     * @example:\r\n     *    <table-builder #table\r\n     *        [source]=\"[{ id: 1, name: 'hello', value: 'world', description: 'text' }, ...]\"\r\n     *        [exclude]=\"[ 'description' ]\">\r\n     *      <ngx-column *ngFor=\"let key of table.modelColumnKeys\"></ngx-column>\r\n     *    </table-builder>\r\n     *    ------------------------\r\n     *    modelColumnKeys === [ 'id', 'hello', 'value' ]\r\n     */\r\n    public modelColumnKeys: string[] = [];\r\n\r\n    /**\r\n     * @description: the custom names of the column list to be displayed in the view.\r\n     * @example:\r\n     *    <table-builder [keys]=[ 'id', 'description', 'name', 'description' ] />\r\n     *    customModelColumnsKeys === [ 'id', 'description', 'name', 'description' ]\r\n     *    ------------------------\r\n     *    <table-builder [keys]=[ 'id', 'description', 'name', 'description' ] [exclude]=[ 'id', 'description' ] />\r\n     *    customModelColumnsKeys === [ 'name' ]\r\n     */\r\n    public customModelColumnsKeys: string[] = [];\r\n\r\n    public isDragging: KeyMap<boolean> = {};\r\n    public abstract readonly templateParser: TemplateParserService;\r\n    public abstract readonly selection: SelectionService;\r\n    public abstract readonly utils: UtilsService;\r\n    public abstract readonly cd: ChangeDetectorRef;\r\n    public abstract readonly resize: ResizableService;\r\n    public abstract readonly sortable: SortableService;\r\n    public abstract readonly contextMenu: ContextMenuService;\r\n    public abstract readonly filterable: FilterableService;\r\n    public abstract readonly ngZone: NgZone;\r\n    public accessDragging: boolean = false;\r\n    protected abstract readonly app: ApplicationRef;\r\n    protected abstract readonly viewChanges: NgxTableViewChangesService;\r\n    protected abstract readonly draggable: DraggableService;\r\n    protected originalSource: TableRow[];\r\n    protected renderedCountKeys: number;\r\n    private filterIdTask: number = null;\r\n\r\n    /**\r\n     * @description - <table-builder [keys]=[ 'id', 'value', 'id', 'position', 'value' ] />\r\n     * returned unique displayed columns [ 'id', 'value', 'position' ]\r\n     */\r\n    public get displayedColumns(): string[] {\r\n        return Object.keys(this.templateParser.compiledTemplates) || [];\r\n    }\r\n\r\n    public get visibleColumns(): string[] {\r\n        return this.columnSchema\r\n            .filter((column: ColumnsSchema) => column.isVisible)\r\n            .map((column: ColumnsSchema) => column.key);\r\n    }\r\n\r\n    /**\r\n     * @description - <table-builder [keys]=[ 'id', 'value', 'id', 'position', 'value' ] />\r\n     * returned ordered displayed columns [ 'id', 'value', 'id', 'position', 'value' ]\r\n     */\r\n    public get positionColumns(): string[] {\r\n        return this.columnSchema.map((column: ColumnsSchema) => column.key);\r\n    }\r\n\r\n    public get columnSchema(): ColumnsSchema[] {\r\n        return (this.templateParser.schema && this.templateParser.schema.columns) || [];\r\n    }\r\n\r\n    public get selectedItems(): TableRow[] {\r\n        return this.source.filter((item: TableRow[]) => this.selectionModel.entries[item[this.primaryKey]]);\r\n    }\r\n\r\n    public get firstItem(): TableRow {\r\n        return (this.source && this.source[0]) || {};\r\n    }\r\n\r\n    public get lastItem(): TableRow {\r\n        return (this.source && this.source[this.source.length - 1]) || {};\r\n    }\r\n\r\n    public get selectionModel(): SelectionMap {\r\n        return this.selection.selectionModel;\r\n    }\r\n\r\n    public get clientRowHeight(): number {\r\n        return parseInt(this.rowHeight as string) || ROW_HEIGHT;\r\n    }\r\n\r\n    public get clientColWidth(): number {\r\n        return this.autoWidth ? null : parseInt(this.columnWidth as string) || null;\r\n    }\r\n\r\n    public get columnVirtualHeight(): number {\r\n        return this.source.length * this.clientRowHeight;\r\n    }\r\n\r\n    public get columnHeight(): number {\r\n        return this.size * this.clientRowHeight + this.clientRowHeight;\r\n    }\r\n\r\n    public get size(): number {\r\n        return (this.source && this.source.length) || 0;\r\n    }\r\n\r\n    public abstract markDirtyCheck(): void;\r\n\r\n    public abstract markForCheck(): void;\r\n\r\n    public abstract markTemplateContentCheck(): void;\r\n\r\n    public abstract ngOnChanges(changes: SimpleChanges): void;\r\n\r\n    public abstract ngOnInit(): void;\r\n\r\n    public abstract ngAfterContentInit(): void;\r\n\r\n    public abstract ngAfterViewInit(): void;\r\n\r\n    public abstract ngAfterViewChecked(): void;\r\n\r\n    public abstract ngOnDestroy(): void;\r\n\r\n    public recheckViewportChecked(): void {\r\n        this.tableViewportChecked = !this.tableViewportChecked;\r\n        this.idleDetectChanges();\r\n    }\r\n\r\n    public enableDragging(key: string): void {\r\n        if (this.templateParser.compiledTemplates[key].draggable) {\r\n            this.accessDragging = true;\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    public disableDragging(): void {\r\n        if (this.accessDragging) {\r\n            this.accessDragging = false;\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    public resizeColumn({ event, key }: ResizeEvent, column: HTMLDivElement): void {\r\n        this.recheckViewportChecked();\r\n        this.disableDragging();\r\n\r\n        this.resize.resize(\r\n            event as MouseEvent,\r\n            column,\r\n            (width: number) => this.calculateWidth(key, width),\r\n            () => this.afterCalculateWidth()\r\n        );\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    public filter(): void {\r\n        if (!this.enableFiltering) {\r\n            throw new Error('You forgot to enable filtering: \\n <ngx-table-builder [enable-filtering]=\"true\" />');\r\n        }\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            window.clearInterval(this.filterIdTask);\r\n            this.filterIdTask = window.setTimeout(() => {\r\n                this.filterable.changeFilteringStatus();\r\n                this.sortAndFilter().then(() => this.reCheckDefinitions());\r\n            }, MACRO_TIME);\r\n        });\r\n    }\r\n\r\n    public async sortAndFilter(): Promise<void> {\r\n        this.toggleFreeze();\r\n\r\n        if (this.filterable.filterValueExist && this.enableFiltering) {\r\n            const filter: FilterWorkerEvent = await this.filterable.filter(this.originalSource);\r\n            this.source = await this.sortable.sort(filter.source);\r\n            filter.fireSelection();\r\n        } else if (!this.sortable.empty && this.source) {\r\n            this.source = await this.sortable.sort(this.originalSource);\r\n        }\r\n\r\n        if (this.sortable.empty && !this.filterable.filterValueExist) {\r\n            this.source = this.originalSource;\r\n        }\r\n\r\n        this.toggleFreeze(TIME_IDLE);\r\n    }\r\n\r\n    public sortByKey(key: string): void {\r\n        this.sortable.updateSortKey(key);\r\n        this.sortAndFilter().then(() => this.reCheckDefinitions());\r\n    }\r\n\r\n    public drop({ previousIndex, currentIndex }: CdkDragSortEvent): void {\r\n        const previousKey: string = this.visibleColumns[previousIndex];\r\n        const currentKey: string = this.visibleColumns[currentIndex];\r\n        this.draggable.drop(previousKey, currentKey);\r\n        this.changeSchema();\r\n    }\r\n\r\n    public checkVisible(visible: boolean): void {\r\n        this.inViewport = visible;\r\n        this.detectChanges();\r\n    }\r\n\r\n    public detectChanges(): void {\r\n        if (!(this.cd as ViewRef).destroyed) {\r\n            this.cd.detectChanges();\r\n        }\r\n    }\r\n\r\n    public toggleFreeze(time: number = null, callback: Fn = null): void {\r\n        this.isFrozenView = !this.isFrozenView;\r\n        if (time) {\r\n            window.setTimeout(() => {\r\n                this.detectChanges();\r\n                callback && callback();\r\n            }, time);\r\n        } else {\r\n            this.detectChanges();\r\n        }\r\n    }\r\n\r\n    public changeSchema(defaultColumns: SimpleSchemaColumns = null): void {\r\n        const renderedColumns: SimpleSchemaColumns = this.templateParser.schema.exportColumns();\r\n        const columns: SimpleSchemaColumns = defaultColumns || renderedColumns;\r\n        this.viewChanges.update({ name: this.name, columns });\r\n        this.schemaChanges.emit(columns);\r\n        this.idleDetectChanges();\r\n    }\r\n\r\n    protected reCheckDefinitions(): void {\r\n        this.filterable.definition = { ...this.filterable.definition };\r\n        this.filterable.changeFilteringStatus();\r\n        this.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * @description: returns the number of keys in the model\r\n     * @example: <table-builder [source]=[{ id: 1, name: 'hello' }, ...] /> a value of 2 will be returned\r\n     */\r\n    protected getCountKeys(): number {\r\n        return Object.keys(this.firstItem).length;\r\n    }\r\n\r\n    /**\r\n     * @see TableBuilderApiImpl#customModelColumnsKeys for further information\r\n     */\r\n    protected generateCustomModelColumnsKeys(): string[] {\r\n        return this.excluding(this.keys);\r\n    }\r\n\r\n    /**\r\n     * @see TableBuilderApiImpl#modelColumnKeys for further information\r\n     */\r\n    protected generateModelColumnKeys(): string[] {\r\n        return this.excluding(this.utils.flattenKeysByRow(this.firstItem));\r\n    }\r\n\r\n    protected idleDetectChanges(): void {\r\n        this.ngZone.runOutsideAngular(() => window.requestAnimationFrame(() => this.detectChanges()));\r\n    }\r\n\r\n    private calculateWidth(key: string, width: number): void {\r\n        this.isDragging[key] = true;\r\n        this.onMouseResizeColumn(key, width);\r\n    }\r\n\r\n    private afterCalculateWidth(): void {\r\n        this.isDragging = {};\r\n        this.recheckViewportChecked();\r\n        this.changeSchema();\r\n    }\r\n\r\n    private onMouseResizeColumn(key: string, width: number): void {\r\n        this.templateParser.mutateColumnSchema(key, { width });\r\n        this.idleDetectChanges();\r\n    }\r\n\r\n    private excluding(keys: string[]): string[] {\r\n        return this.excludeKeys.length\r\n            ? keys.filter((key: string) => {\r\n                  return !this.excludeKeys.some((excludeKey: string | RegExp) => {\r\n                      return excludeKey instanceof RegExp ? !!key.match(excludeKey) : key === excludeKey;\r\n                  });\r\n              })\r\n            : keys;\r\n    }\r\n}\r\n","export function isFirefox(userAgent: string = null): boolean {\r\n    return (userAgent || navigator.userAgent).toLowerCase().indexOf('firefox') > -1;\r\n}\r\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\r\n\r\nconst DEFAULT_TIME_ANIMATION: number = 150;\r\n\r\nexport const NGX_ANIMATION: AnimationTriggerMetadata = trigger('fadeAnimation', [\r\n    // the \"in\" style determines the \"resting\" state of the element when it is visible.\r\n    state('in', style({ opacity: 1 })),\r\n\r\n    // fade in when created. this could also be written as transition('void => *')\r\n    transition(':enter', [style({ opacity: 0 }), animate(DEFAULT_TIME_ANIMATION)]),\r\n\r\n    // fade out when destroyed. this could also be written as transition('void => *')\r\n    transition(':leave', animate(DEFAULT_TIME_ANIMATION, style({ opacity: 0 })))\r\n]);\r\n","import { ColumnsSchema } from '../../interfaces/table-builder.external';\r\nimport { DeepPartial } from '../../interfaces/table-builder.internal';\r\n\r\nexport class SchemaBuilder {\r\n    constructor(public columns: ColumnsSchema[] = []) {}\r\n\r\n    public exportColumns(): Array<DeepPartial<ColumnsSchema>> {\r\n        return this.columns.map((column: ColumnsSchema) => ({\r\n            key: column.key,\r\n            width: column.width,\r\n            isVisible: column.isVisible,\r\n            isModel: column.isModel\r\n        }));\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ColumnsSchema, ImplicitContext, TableCellOptions } from '../../interfaces/table-builder.external';\r\nimport { TemplateHeadThDirective } from '../../directives/rows/template-head-th.directive';\r\nimport { TemplateBodyTdDirective } from '../../directives/rows/template-body-td.directive';\r\nimport { NgxColumnComponent } from '../../components/ngx-column/ngx-column.component';\r\nimport { KeyMap, QueryListRef } from '../../interfaces/table-builder.internal';\r\nimport { TemplateCellCommon } from '../../directives/rows/template-cell.common';\r\nimport { ColumnOptions } from '../../components/common/column-options';\r\nimport { SchemaBuilder } from './schema-builder.class';\r\n\r\n@Injectable()\r\nexport class TemplateParserService {\r\n    public schema: SchemaBuilder;\r\n    public templateKeys: Set<string>;\r\n    public fullTemplateKeys: Set<string>;\r\n    public overrideTemplateKeys: Set<string>;\r\n    public columnOptions: ColumnOptions;\r\n    public compiledTemplates: KeyMap<ColumnsSchema> = {};\r\n\r\n    private static templateContext(key: string, cell: TemplateCellCommon, options: ColumnOptions): TableCellOptions {\r\n        return {\r\n            textBold: cell.bold,\r\n            template: cell.template,\r\n            class: cell.cssClasses,\r\n            style: cell.cssStyles,\r\n            width: cell.width,\r\n            height: cell.height,\r\n            onClick: cell.onClick,\r\n            dblClick: cell.dblClick,\r\n            useDeepPath: key.includes('.'),\r\n            context: cell.row ? ImplicitContext.ROW : ImplicitContext.CELL,\r\n            nowrap: TemplateParserService.getValidPredicate(options.nowrap, cell.nowrap)\r\n        };\r\n    }\r\n\r\n    private static getValidHtmlBooleanAttribute(attribute: boolean): boolean {\r\n        return typeof attribute === 'string' ? true : attribute;\r\n    }\r\n\r\n    private static getValidPredicate<T>(leftPredicate: T, rightPredicate: T): T {\r\n        return leftPredicate === null ? rightPredicate : leftPredicate;\r\n    }\r\n\r\n    public toggleColumnVisibility(key: string): void {\r\n        this.schema.columns = this.schema.columns.map((column: ColumnsSchema) =>\r\n            key === column.key\r\n                ? {\r\n                      ...column,\r\n                      isVisible: !column.isVisible\r\n                  }\r\n                : column\r\n        );\r\n    }\r\n\r\n    public initialSchema(columnOptions: ColumnOptions): void {\r\n        this.schema = this.schema || new SchemaBuilder();\r\n        this.schema.columns = [];\r\n        this.compiledTemplates = {};\r\n        this.templateKeys = new Set<string>();\r\n        this.overrideTemplateKeys = new Set<string>();\r\n        this.fullTemplateKeys = new Set<string>();\r\n        this.columnOptions = columnOptions || new ColumnOptions();\r\n    }\r\n\r\n    public parse(allowedKeyMap: KeyMap<boolean>, templates: QueryListRef<NgxColumnComponent>): void {\r\n        if (!templates) {\r\n            return;\r\n        }\r\n\r\n        templates.forEach((column: NgxColumnComponent) => {\r\n            const { key, customKey, importantTemplate }: NgxColumnComponent = column;\r\n            const needTemplateCheck: boolean = allowedKeyMap[key] || customKey !== false;\r\n\r\n            if (needTemplateCheck) {\r\n                if (importantTemplate !== false) {\r\n                    this.templateKeys.delete(key);\r\n                    this.compileColumnMetadata(column);\r\n                    this.overrideTemplateKeys.add(key);\r\n                } else if (!this.templateKeys.has(key) && !this.overrideTemplateKeys.has(key)) {\r\n                    this.compileColumnMetadata(column);\r\n                    this.templateKeys.add(key);\r\n                }\r\n\r\n                this.fullTemplateKeys.add(key);\r\n            }\r\n        });\r\n    }\r\n\r\n    public mutateColumnSchema(key: string, partialSchema: Partial<ColumnsSchema>): void {\r\n        for (const option of Object.keys(partialSchema)) {\r\n            this.compiledTemplates[key][option] = partialSchema[option];\r\n        }\r\n    }\r\n\r\n    public compileColumnMetadata(column: NgxColumnComponent): void {\r\n        const { key, th, td, emptyHead, headTitle, customKey }: NgxColumnComponent = column;\r\n        const thTemplate: TemplateCellCommon = th || new TemplateHeadThDirective(null);\r\n        const tdTemplate: TemplateCellCommon = td || new TemplateBodyTdDirective(null);\r\n        const isEmptyHead: boolean = TemplateParserService.getValidHtmlBooleanAttribute(emptyHead);\r\n        const thOptions: TableCellOptions = TemplateParserService.templateContext(key, thTemplate, this.columnOptions);\r\n        this.compiledTemplates[key] = {\r\n            key,\r\n            th: {\r\n                ...thOptions,\r\n                headTitle,\r\n                emptyHead: isEmptyHead,\r\n                template: isEmptyHead ? null : thOptions.template\r\n            },\r\n            td: TemplateParserService.templateContext(key, tdTemplate, this.columnOptions),\r\n            stickyLeft: TemplateParserService.getValidHtmlBooleanAttribute(column.stickyLeft),\r\n            stickyRight: TemplateParserService.getValidHtmlBooleanAttribute(column.stickyRight),\r\n            customColumn: TemplateParserService.getValidHtmlBooleanAttribute(column.customKey),\r\n            width: TemplateParserService.getValidPredicate(column.width, this.columnOptions.width),\r\n            cssClass: TemplateParserService.getValidPredicate(column.cssClass, this.columnOptions.cssClass) || [],\r\n            cssStyle: TemplateParserService.getValidPredicate(column.cssStyle, this.columnOptions.cssStyle) || [],\r\n            resizable: TemplateParserService.getValidPredicate(column.resizable, this.columnOptions.resizable),\r\n            sortable: TemplateParserService.getValidPredicate(column.sortable, this.columnOptions.sortable),\r\n            filterable: TemplateParserService.getValidPredicate(column.filterable, this.columnOptions.filterable),\r\n            draggable: TemplateParserService.getValidPredicate(column.draggable, this.columnOptions.draggable),\r\n            verticalLine: column.verticalLine,\r\n            isModel: customKey === false,\r\n            isVisible: true\r\n        };\r\n    }\r\n}\r\n","import { TableRow } from '../../interfaces/table-builder.external';\r\nimport { KeyMap } from '../../interfaces/table-builder.internal';\r\n\r\nexport enum SortOrderType {\r\n    ASC = 'asc',\r\n    DESC = 'desc'\r\n}\r\n\r\nexport interface SortableMessage {\r\n    definition: KeyMap<SortOrderType>;\r\n    source: TableRow[];\r\n}\r\n","import { TableRow } from '../../interfaces/table-builder.external';\r\nimport { SortableMessage } from './sortable.interfaces';\r\nimport { Any, KeyMap } from '../../interfaces/table-builder.internal';\r\n\r\nexport function sortWorker(message: SortableMessage): TableRow[] {\r\n    enum OrderType {\r\n        DESC = 'desc',\r\n        SKIP = 'skip'\r\n    }\r\n\r\n    function getValueByPath(object: KeyMap, path: string): KeyMap | undefined {\r\n        return path ? path.split('.').reduce((value: string, key: string) => value && value[key], object) : object;\r\n    }\r\n\r\n    function checkValueIsEmpty(value: Any): boolean {\r\n        const val: string = typeof value === 'string' ? value.trim() : value;\r\n        return [undefined, null, NaN, '', 'null', Infinity].includes(val);\r\n    }\r\n\r\n    class Sortable {\r\n        public static sortByKeys(data: TableRow[], keys: KeyMap<OrderType>): Any[] {\r\n            const countKeys: number = Object.keys(keys).length;\r\n\r\n            if (!countKeys) {\r\n                return data.sort(Sortable.shallowSort);\r\n            }\r\n\r\n            const matches: KeyMap<number> = Sortable.getMatchesKeys(keys);\r\n            return data.sort((a: unknown, b: unknown) => Sortable.multiSort(a, b, matches));\r\n        }\r\n\r\n        private static multiSort(a: unknown, b: unknown, matches: KeyMap<number>): Any {\r\n            const countKeys: number = Object.keys(matches).length;\r\n            let sorted: number = 0;\r\n            let ix: number = 0;\r\n\r\n            while (sorted === 0 && ix < countKeys) {\r\n                const key: string = Sortable.observeKey(matches, ix);\r\n                if (key) {\r\n                    const depth: number = matches[key];\r\n                    sorted = Sortable.deepSort(key, a, b, depth);\r\n                    ix++;\r\n                }\r\n            }\r\n\r\n            return sorted;\r\n        }\r\n\r\n        private static getMatchesKeys(keys: KeyMap<OrderType | number>): KeyMap<number> {\r\n            const matches: KeyMap<number> = {};\r\n\r\n            for (const key in keys) {\r\n                if (keys.hasOwnProperty(key)) {\r\n                    matches[key] =\r\n                        keys[key] === OrderType.DESC || keys[key] === -1\r\n                            ? -1\r\n                            : keys[key] === OrderType.SKIP || keys[key] === 0\r\n                            ? 0\r\n                            : 1;\r\n                }\r\n            }\r\n\r\n            return matches;\r\n        }\r\n\r\n        private static deepSort(key: string, leftHand: Any, rightHand: Any, depth: number): number {\r\n            const a: Any = getValueByPath(leftHand, key);\r\n            const b: Any = getValueByPath(rightHand, key);\r\n            return this.shallowSort(a, b, depth);\r\n        }\r\n\r\n        private static shallowSort(a: Any, b: Any, depth?: number): number {\r\n            const currentDepth: number = depth !== null ? depth : 1;\r\n            b = checkValueIsEmpty(b) ? '' : b;\r\n\r\n            if (a === b) {\r\n                return 0;\r\n            }\r\n\r\n            return a > b ? currentDepth : -1 * currentDepth;\r\n        }\r\n\r\n        private static observeKey(keys: KeyMap<number>, count: number): string {\r\n            let key: string;\r\n            let size: number = 0;\r\n\r\n            for (key in keys) {\r\n                if (keys.hasOwnProperty(key)) {\r\n                    if (size === count) {\r\n                        return key;\r\n                    }\r\n\r\n                    size++;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return Sortable.sortByKeys(message.source, message.definition as Any);\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\n\r\nimport { KeyMap, Resolver } from '../../interfaces/table-builder.internal';\r\nimport { TableBuilderOptionsImpl } from '../../config/table-builder-options';\r\nimport { WebWorkerThreadService } from '../../worker/worker-thread.service';\r\nimport { SortableMessage, SortOrderType } from './sortable.interfaces';\r\nimport { TableRow } from '../../interfaces/table-builder.external';\r\nimport { UtilsService } from '../utils/utils.service';\r\nimport { sortWorker } from './sort.worker';\r\n\r\n@Injectable()\r\nexport class SortableService {\r\n    public definition: KeyMap<SortOrderType> = {};\r\n\r\n    constructor(\r\n        private readonly thread: WebWorkerThreadService,\r\n        private readonly utils: UtilsService,\r\n        private readonly zone: NgZone\r\n    ) {}\r\n\r\n    public get empty(): boolean {\r\n        return Object.keys(this.definition).length === 0;\r\n    }\r\n\r\n    public sort(data: TableRow[]): Promise<TableRow[]> {\r\n        return new Promise((resolve: Resolver<TableRow[]>): void => {\r\n            this.thread\r\n                .run<TableRow[], SortableMessage>(sortWorker, { definition: this.definition, source: data })\r\n                .then((sorted: TableRow[]) => {\r\n                    this.zone.runOutsideAngular(() =>\r\n                        window.setTimeout(() => resolve(sorted), TableBuilderOptionsImpl.TIME_IDLE)\r\n                    );\r\n                });\r\n        });\r\n    }\r\n\r\n    public setDefinition(definition: KeyMap<string>): void {\r\n        this.definition = this.empty ? (definition as KeyMap<SortOrderType>) || {} : this.definition;\r\n    }\r\n\r\n    public updateSortKey(key: string): void {\r\n        this.definition = this.updateImmutableDefinitions(key);\r\n    }\r\n\r\n    private updateImmutableDefinitions(key: string): KeyMap<SortOrderType> {\r\n        const existKey: SortOrderType = this.definition[key];\r\n\r\n        if (existKey) {\r\n            if (existKey === SortOrderType.ASC) {\r\n                this.definition[key] = SortOrderType.DESC;\r\n            } else {\r\n                delete this.definition[key];\r\n            }\r\n        } else {\r\n            this.definition[key] = SortOrderType.ASC;\r\n        }\r\n\r\n        return { ...this.definition };\r\n    }\r\n}\r\n","import { KeyMap, RowId } from '../../interfaces/table-builder.internal';\r\n\r\nexport class SelectionMap {\r\n    public isAll: boolean = false;\r\n    public entries: KeyMap<boolean> = {};\r\n    private readonly map: Map<RowId, boolean> = new Map<RowId, boolean>();\r\n\r\n    public get size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    public generateImmutableEntries(): void {\r\n        this.entries = Array.from(this.map.entries()).reduce(\r\n            (main: KeyMap<boolean>, [key, value]: [RowId, boolean]) => ({ ...main, [key]: value }),\r\n            {}\r\n        );\r\n    }\r\n\r\n    public hasValue(): boolean {\r\n        return this.size > 0;\r\n    }\r\n\r\n    public get isIndeterminate(): boolean {\r\n        return this.hasValue() && !this.isAll;\r\n    }\r\n\r\n    public get(key: RowId): boolean {\r\n        return this.map.get(key) || false;\r\n    }\r\n\r\n    public select(key: RowId, emit: boolean): void {\r\n        this.map.set(key, true);\r\n\r\n        if (emit) {\r\n            this.generateImmutableEntries();\r\n        }\r\n    }\r\n\r\n    public toggle(key: string | number, emit: boolean): void {\r\n        if (this.has(key)) {\r\n            this.delete(key, emit);\r\n        } else {\r\n            this.select(key, emit);\r\n        }\r\n    }\r\n\r\n    public delete(key: RowId, emit: boolean): void {\r\n        this.map.delete(key);\r\n        if (emit) {\r\n            this.generateImmutableEntries();\r\n        }\r\n    }\r\n\r\n    public has(key: RowId): boolean {\r\n        return this.map.has(key);\r\n    }\r\n\r\n    public clear(): void {\r\n        this.map.clear();\r\n        this.entries = {};\r\n        this.isAll = false;\r\n    }\r\n}\r\n","export class SelectionRange {\r\n    public start: number = null;\r\n    public end: number = null;\r\n\r\n    public put(index: number): void {\r\n        if (this.start === null) {\r\n            this.start = index;\r\n        } else {\r\n            this.end = index;\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        this.start = null;\r\n        this.end = null;\r\n    }\r\n\r\n    public sortKeys(): SelectionRange {\r\n        const [start, end]: number[] = [this.start, this.end].sort((a: number, b: number) => a - b);\r\n        this.start = start;\r\n        this.end = end;\r\n\r\n        return this;\r\n    }\r\n\r\n    public selectedRange(): boolean {\r\n        return this.start !== null && this.end !== null;\r\n    }\r\n}\r\n","import { Injectable, NgZone, OnDestroy } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { SelectionMap } from './selection';\r\nimport { SelectionRange } from './selection-range';\r\nimport { TableRow } from '../../interfaces/table-builder.external';\r\nimport { Fn, KeyMap, KeyType, PrimaryKey, RowId, SelectionStatus } from '../../interfaces/table-builder.internal';\r\nimport { checkValueIsEmpty } from '../../operators/check-value-is-empty';\r\n\r\n@Injectable()\r\nexport class SelectionService implements OnDestroy {\r\n    public selectionModel: SelectionMap = new SelectionMap();\r\n    public range: SelectionRange = new SelectionRange();\r\n    public selectionStart: SelectionStatus = { status: false };\r\n    public primaryKey: string = PrimaryKey.ID;\r\n    public selectionTaskIdle: number;\r\n    public onChanges: Subject<void> = new Subject<void>();\r\n    private readonly handler: KeyMap<Fn> = {};\r\n\r\n    constructor(private readonly ngZone: NgZone) {}\r\n\r\n    public listenShiftKey(): void {\r\n        this.listenShiftKeyByType(KeyType.KEYDOWN);\r\n        this.listenShiftKeyByType(KeyType.KEYUP);\r\n    }\r\n\r\n    public unListenShiftKey(): void {\r\n        this.removeListenerByType(KeyType.KEYDOWN);\r\n        this.removeListenerByType(KeyType.KEYUP);\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.unListenShiftKey();\r\n    }\r\n\r\n    public toggleAll(rows: TableRow[]): void {\r\n        clearInterval(this.selectionTaskIdle);\r\n\r\n        const selectIsAll: boolean = rows.length === this.selectionModel.size;\r\n        if (!selectIsAll) {\r\n            rows.forEach((row: TableRow) => this.selectionModel.select(this.getIdByRow(row), false));\r\n        } else {\r\n            this.selectionModel.clear();\r\n        }\r\n\r\n        this.checkIsAllSelected(rows);\r\n    }\r\n\r\n    public toggle(row: TableRow): void {\r\n        clearInterval(this.selectionTaskIdle);\r\n        this.selectionModel.toggle(this.getIdByRow(row), true);\r\n        this.onChanges.next();\r\n    }\r\n\r\n    public selectRow(row: TableRow, event: MouseEvent, rows: TableRow[]): void {\r\n        const { shiftKey, ctrlKey }: MouseEvent = event;\r\n        const index: number = rows.findIndex((item: TableRow) => item[this.primaryKey] === row[this.primaryKey]);\r\n\r\n        if (shiftKey) {\r\n            this.multipleSelectByShiftKeydown(index, rows);\r\n        } else if (ctrlKey) {\r\n            this.multipleSelectByCtrlKeydown(row, index);\r\n        } else {\r\n            this.singleSelect(row, index);\r\n        }\r\n\r\n        this.checkIsAllSelected(rows);\r\n    }\r\n\r\n    public getIdByRow(row: TableRow): RowId {\r\n        const id: RowId = row[this.primaryKey];\r\n\r\n        if (checkValueIsEmpty(id)) {\r\n            throw new Error(\r\n                `Can't select item, make sure you pass the correct primary key, or you forgot enable selection\r\n                <ngx-table-builder [enable-selection]=\"true\" primary-key=\"fieldId\" />\r\n                `\r\n            );\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    public shiftKeyDetectSelection({ shiftKey }: KeyboardEvent): void {\r\n        this.selectionStart = { status: shiftKey };\r\n    }\r\n\r\n    private listenShiftKeyByType(type: KeyType): void {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.handler[type] = ({ shiftKey }: KeyboardEvent): void => {\r\n                this.selectionStart = { status: shiftKey };\r\n            };\r\n            window.addEventListener(type, this.handler[type], true);\r\n        });\r\n    }\r\n\r\n    private removeListenerByType(type: string): void {\r\n        window.removeEventListener(type, this.handler[type], true);\r\n    }\r\n\r\n    private checkIsAllSelected(rows: TableRow[]): void {\r\n        this.selectionModel.isAll = rows.length === this.selectionModel.size;\r\n        this.selectionModel.generateImmutableEntries();\r\n        this.onChanges.next();\r\n    }\r\n\r\n    private multipleSelectByShiftKeydown(index: number, rows: TableRow[]): void {\r\n        this.selectionModel.clear();\r\n        this.range.put(index);\r\n        const selectedRange: boolean = this.range.selectedRange();\r\n\r\n        if (selectedRange) {\r\n            const { start, end }: SelectionRange = this.range.sortKeys();\r\n            for (let i: number = start; i <= end; ++i) {\r\n                this.selectionModel.select(this.getIdByRow(rows[i]), false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private multipleSelectByCtrlKeydown(row: TableRow, index: number): void {\r\n        this.range.clear();\r\n        this.range.start = index;\r\n        this.selectionModel.toggle(this.getIdByRow(row), true);\r\n    }\r\n\r\n    private singleSelect(row: TableRow, index: number): void {\r\n        this.selectionModel.clear();\r\n        this.selectionModel.select(this.getIdByRow(row), true);\r\n        this.range.clear();\r\n        this.range.start = index;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { fromEvent, ReplaySubject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\nimport { Fn } from '../../interfaces/table-builder.internal';\r\nimport { TableBuilderOptionsImpl } from '../../config/table-builder-options';\r\n\r\nconst { COLUMN_RESIZE_MIN_WIDTH }: typeof TableBuilderOptionsImpl = TableBuilderOptionsImpl;\r\n\r\n@Injectable()\r\nexport class ResizableService {\r\n    public startX: number;\r\n    public startWidth: number;\r\n    private destroyed$: ReplaySubject<boolean>;\r\n\r\n    private static clearSelection(): void {\r\n        if (window.getSelection) {\r\n            window.getSelection().removeAllRanges();\r\n        } else if (document['selection']) {\r\n            document['selection'].empty();\r\n        }\r\n    }\r\n\r\n    public resize(event: MouseEvent, column: HTMLElement, mousemove: Fn, mouseup: Fn): void {\r\n        this.destroyed$ = new ReplaySubject(1);\r\n        this.startX = event.pageX;\r\n        this.startWidth = column.offsetWidth;\r\n\r\n        fromEvent(document, 'mousemove')\r\n            .pipe(takeUntil(this.destroyed$))\r\n            .subscribe((e: MouseEvent) => this.computeEvent(e, mousemove));\r\n\r\n        fromEvent(document, 'mouseup')\r\n            .pipe(takeUntil(this.destroyed$))\r\n            .subscribe((e: MouseEvent) => this.unsubscribe(e, mouseup));\r\n    }\r\n\r\n    private computeEvent(event: MouseEvent, mousemove: Fn): void {\r\n        ResizableService.clearSelection();\r\n        const width: number = this.startWidth + (event.pageX - this.startX);\r\n        if (width >= COLUMN_RESIZE_MIN_WIDTH) {\r\n            mousemove(width);\r\n        }\r\n    }\r\n\r\n    private unsubscribe(event: MouseEvent, mouseup: Fn): void {\r\n        this.destroyed$.next(true);\r\n        this.destroyed$.complete();\r\n        mouseup(event);\r\n    }\r\n}\r\n","import { moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { TemplateParserService } from '../template-parser/template-parser.service';\r\nimport { ColumnsSchema } from '../../interfaces/table-builder.external';\r\n\r\n@Injectable()\r\nexport class DraggableService {\r\n    constructor(private readonly parser: TemplateParserService) {}\r\n\r\n    private get columns(): ColumnsSchema[] {\r\n        return this.parser.schema.columns;\r\n    }\r\n\r\n    public drop(previousKey: string, currentKey: string): void {\r\n        const previousIndex: number = this.columns.findIndex((column: ColumnsSchema) => column.key === previousKey);\r\n        const currentIndex: number = this.columns.findIndex((column: ColumnsSchema) => column.key === currentKey);\r\n\r\n        if (this.canDropped(previousIndex, currentIndex)) {\r\n            if (currentIndex === this.columns.length - 1) {\r\n                this.columns[currentIndex].width = this.columns[previousIndex].width;\r\n                this.columns[previousIndex].width = null;\r\n            }\r\n\r\n            moveItemInArray(this.columns, previousIndex, currentIndex);\r\n        }\r\n    }\r\n\r\n    public canDropped(previousIndex: number, currentIndex: number): boolean {\r\n        const previous: ColumnsSchema = this.columns[previousIndex];\r\n        const current: ColumnsSchema = this.columns[currentIndex];\r\n        const previousIsDraggable: boolean = previous.draggable;\r\n        const currentIsDraggable: boolean = current.draggable;\r\n        const isSticky: boolean =\r\n            previous.stickyLeft || current.stickyLeft || previous.stickyRight || current.stickyRight;\r\n\r\n        return previousIsDraggable && currentIsDraggable && !isSticky;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport { TableUpdateSchema } from '../../interfaces/table-builder.external';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class NgxTableViewChangesService {\r\n    public events: Subject<TableUpdateSchema> = new Subject<TableUpdateSchema>();\r\n    public update(state: TableUpdateSchema): void {\r\n        this.events.next(state);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class OverloadScrollService {\r\n    public scrollStatus: Subject<boolean> = new Subject();\r\n}\r\n","import {\r\n    AfterContentInit,\r\n    AfterViewChecked,\r\n    AfterViewInit,\r\n    ApplicationRef,\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    ElementRef,\r\n    NgZone,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    SimpleChange,\r\n    SimpleChanges,\r\n    ViewChild,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport {\r\n    Any,\r\n    Fn,\r\n    KeyMap,\r\n    RecalculatedStatus,\r\n    ScrollOffsetStatus,\r\n    TableSimpleChanges,\r\n    TemplateKeys\r\n} from './interfaces/table-builder.internal';\r\nimport { TableBuilderApiImpl } from './table-builder.api';\r\nimport { NGX_ANIMATION } from './animations/fade.animation';\r\nimport { ColumnsSchema } from './interfaces/table-builder.external';\r\nimport { NgxColumnComponent } from './components/ngx-column/ngx-column.component';\r\nimport { TemplateParserService } from './services/template-parser/template-parser.service';\r\nimport { SortableService } from './services/sortable/sortable.service';\r\nimport { SelectionService } from './services/selection/selection.service';\r\nimport { UtilsService } from './services/utils/utils.service';\r\nimport { ResizableService } from './services/resizer/resizable.service';\r\nimport { TableBuilderOptionsImpl } from './config/table-builder-options';\r\nimport { ContextMenuService } from './services/context-menu/context-menu.service';\r\nimport { FilterableService } from './services/filterable/filterable.service';\r\nimport { TableFilterType } from './services/filterable/filterable.interface';\r\nimport { DraggableService } from './services/draggable/draggable.service';\r\nimport { NgxTableViewChangesService } from './services/table-view-changes/ngx-table-view-changes.service';\r\nimport { OverloadScrollService } from './services/overload-scroll/overload-scroll.service';\r\n\r\nconst { TIME_IDLE, TIME_RELOAD, FRAME_TIME }: typeof TableBuilderOptionsImpl = TableBuilderOptionsImpl;\r\n\r\n@Component({\r\n    selector: 'ngx-table-builder',\r\n    templateUrl: './table-builder.component.html',\r\n    styleUrls: ['./table-builder.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [\r\n        TemplateParserService,\r\n        SortableService,\r\n        SelectionService,\r\n        ResizableService,\r\n        ContextMenuService,\r\n        FilterableService,\r\n        DraggableService,\r\n        OverloadScrollService\r\n    ],\r\n    encapsulation: ViewEncapsulation.None,\r\n    animations: [NGX_ANIMATION]\r\n})\r\nexport class TableBuilderComponent extends TableBuilderApiImpl\r\n    implements OnChanges, OnInit, AfterContentInit, AfterViewInit, AfterViewChecked, OnDestroy {\r\n    public dirty: boolean = true;\r\n    public rendering: boolean = false;\r\n    public isRendered: boolean = false;\r\n    public contentInit: boolean = false;\r\n    public contentCheck: boolean = false;\r\n    public showedCellByDefault: boolean = true;\r\n    public scrollOffset: ScrollOffsetStatus = { offset: false };\r\n    public recalculated: RecalculatedStatus = { recalculateHeight: false };\r\n    @ViewChild('header', { static: false })\r\n    public headerRef: ElementRef<HTMLDivElement>;\r\n    @ViewChild('footer', { static: false })\r\n    public footerRef: ElementRef<HTMLDivElement>;\r\n    public sourceIsNull: boolean;\r\n    public isScrolling: boolean;\r\n    private forcedRefresh: boolean = false;\r\n    private readonly destroy$: Subject<boolean> = new Subject<boolean>();\r\n    private checkedTaskId: number = null;\r\n\r\n    constructor(\r\n        public readonly selection: SelectionService,\r\n        public readonly templateParser: TemplateParserService,\r\n        public readonly cd: ChangeDetectorRef,\r\n        public readonly ngZone: NgZone,\r\n        public readonly utils: UtilsService,\r\n        public readonly resize: ResizableService,\r\n        public readonly sortable: SortableService,\r\n        public readonly contextMenu: ContextMenuService,\r\n        protected readonly app: ApplicationRef,\r\n        public readonly filterable: FilterableService,\r\n        protected readonly draggable: DraggableService,\r\n        protected readonly viewChanges: NgxTableViewChangesService,\r\n        protected readonly overloadScroll: OverloadScrollService\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public get selectionEntries(): KeyMap<boolean> {\r\n        return this.selection.selectionModel.entries;\r\n    }\r\n\r\n    public get sourceExists(): boolean {\r\n        return !!this.source && this.source.length > 0;\r\n    }\r\n\r\n    private get viewIsDirty(): boolean {\r\n        return this.contentCheck && !this.forcedRefresh;\r\n    }\r\n\r\n    public checkSourceIsNull(): boolean {\r\n        return !('length' in (this.source || {}));\r\n    }\r\n\r\n    public recalculateHeight(): void {\r\n        this.recalculated = { recalculateHeight: true };\r\n        this.detectChanges();\r\n    }\r\n\r\n    public ngOnChanges(changes: SimpleChanges = {}): void {\r\n        const nonIdenticalStructure: boolean = this.sourceExists && this.getCountKeys() !== this.renderedCountKeys;\r\n        this.sourceIsNull = this.checkSourceIsNull();\r\n        this.sortable.setDefinition(this.sortTypes);\r\n\r\n        if (nonIdenticalStructure) {\r\n            this.renderedCountKeys = this.getCountKeys();\r\n            this.customModelColumnsKeys = this.generateCustomModelColumnsKeys();\r\n            this.modelColumnKeys = this.generateModelColumnKeys();\r\n            this.originalSource = this.source;\r\n            const unDirty: boolean = !this.dirty;\r\n\r\n            this.checkFilterValues();\r\n\r\n            if (unDirty) {\r\n                this.markForCheck();\r\n            }\r\n\r\n            const recycleView: boolean = unDirty && this.isRendered && this.contentInit;\r\n\r\n            if (recycleView) {\r\n                this.renderTable();\r\n            }\r\n        } else if (TableSimpleChanges.SOURCE_KEY in changes && this.isRendered) {\r\n            this.originalSource = changes[TableSimpleChanges.SOURCE_KEY].currentValue;\r\n            this.sortAndFilter().then(() => this.reCheckDefinitions());\r\n        }\r\n\r\n        if (TableSimpleChanges.SCHEMA_COLUMNS in changes) {\r\n            const schemaChange: SimpleChange = changes[TableSimpleChanges.SCHEMA_COLUMNS];\r\n            if (!schemaChange.currentValue) {\r\n                throw new Error(\r\n                    `You need set correct <ngx-table-builder [schema-columns]=\"[] || [..]\" /> for one time binding`\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    public markForCheck(): void {\r\n        this.contentCheck = true;\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        if (this.enableSelection) {\r\n            this.selection.primaryKey = this.primaryKey;\r\n            this.selection.listenShiftKey();\r\n        }\r\n    }\r\n\r\n    public updateScrollOffset(offset: boolean): void {\r\n        this.scrollOffset = { offset };\r\n        this.idleDetectChanges();\r\n    }\r\n\r\n    public markVisibleColumn(column: HTMLDivElement, visible: boolean): void {\r\n        column['visible'] = visible;\r\n        this.detectChanges();\r\n    }\r\n\r\n    public ngAfterContentInit(): void {\r\n        this.markDirtyCheck();\r\n        this.markTemplateContentCheck();\r\n\r\n        if (this.sourceExists) {\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        this.listenTemplateChanges();\r\n        this.listenSelectionChanges();\r\n        this.recheckTemplateChanges();\r\n        this.listenScrollEvents();\r\n    }\r\n\r\n    public ngAfterViewChecked(): void {\r\n        if (this.viewIsDirty) {\r\n            this.viewForceRefresh();\r\n        }\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.templateParser.schema = null;\r\n        this.destroy$.next(true);\r\n        this.destroy$.unsubscribe();\r\n    }\r\n\r\n    public markTemplateContentCheck(): void {\r\n        this.contentInit = !!this.source || !(this.columnTemplates && this.columnTemplates.length);\r\n    }\r\n\r\n    public markDirtyCheck(): void {\r\n        this.dirty = false;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * @description: Key table generation for internal use\r\n     * @sample: keys - ['id', 'value'] -> { id: true, value: true }\r\n     */\r\n    public generateColumnsKeyMap(keys: string[]): KeyMap<boolean> {\r\n        const map: KeyMap<boolean> = {};\r\n        keys.forEach((key: string) => (map[key] = true));\r\n        return map;\r\n    }\r\n\r\n    public render(): void {\r\n        this.contentCheck = false;\r\n        this.utils.macrotask(() => this.renderTable(), TIME_IDLE).then(() => this.idleDetectChanges());\r\n    }\r\n\r\n    public renderTable({ async }: { async: boolean } = { async: true }): void {\r\n        if (this.rendering) {\r\n            return;\r\n        }\r\n\r\n        this.rendering = true;\r\n        const columnList: string[] = this.generateDisplayedColumns();\r\n        const drawTask: Fn<string[], Promise<void>> =\r\n            this.asyncColumns && async ? this.asyncDrawColumns.bind(this) : this.syncDrawColumns.bind(this);\r\n\r\n        if (!this.sortable.empty) {\r\n            this.sortAndFilter().then(() => drawTask(columnList).then(() => this.emitRendered()));\r\n        } else {\r\n            drawTask(columnList).then(() => this.emitRendered());\r\n        }\r\n    }\r\n\r\n    public toggleColumnVisibility(key: string): void {\r\n        this.recheckViewportChecked();\r\n        this.templateParser.toggleColumnVisibility(key);\r\n        this.utils\r\n            .requestAnimationFrame(() => {\r\n                this.changeSchema();\r\n                this.recheckViewportChecked();\r\n            })\r\n            .then(() => this.app.tick());\r\n    }\r\n\r\n    public resetSchema(): void {\r\n        this.tableViewportChecked = false;\r\n        this.schemaColumns = null;\r\n        this.detectChanges();\r\n\r\n        this.renderTable({ async: false });\r\n        this.changeSchema([]);\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            window.setTimeout(() => {\r\n                this.tableViewportChecked = true;\r\n                this.detectChanges();\r\n            }, TableBuilderOptionsImpl.TIME_IDLE);\r\n        });\r\n    }\r\n\r\n    private listenScrollEvents(): void {\r\n        this.overloadScroll.scrollStatus.pipe(takeUntil(this.destroy$)).subscribe((scrolling: boolean) => {\r\n            this.isScrolling = scrolling;\r\n            this.detectChanges();\r\n        });\r\n    }\r\n\r\n    private checkFilterValues(): void {\r\n        if (this.enableFiltering) {\r\n            this.filterable.filterType =\r\n                this.filterable.filterType ||\r\n                (this.columnOptions && this.columnOptions.filterType) ||\r\n                TableFilterType.START_WITH;\r\n\r\n            this.modelColumnKeys.forEach((key: string) => {\r\n                this.filterable.filterTypeDefinition[key] =\r\n                    this.filterable.filterTypeDefinition[key] || this.filterable.filterType;\r\n            });\r\n        }\r\n    }\r\n\r\n    private recheckTemplateChanges(): void {\r\n        this.ngZone.runOutsideAngular(() => window.setTimeout(() => this.app.tick(), TIME_RELOAD));\r\n    }\r\n\r\n    private listenSelectionChanges(): void {\r\n        if (this.enableSelection) {\r\n            this.selection.onChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n                this.detectChanges();\r\n                this.ngZone.runOutsideAngular(() =>\r\n                    window.requestAnimationFrame(() => {\r\n                        this.detectChanges();\r\n                        this.app.tick();\r\n                    })\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    private viewForceRefresh(): void {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            window.clearTimeout(this.checkedTaskId);\r\n            this.checkedTaskId = window.setTimeout(() => {\r\n                this.forcedRefresh = true;\r\n                this.markTemplateContentCheck();\r\n                this.render();\r\n            }, FRAME_TIME);\r\n        });\r\n    }\r\n\r\n    private listenTemplateChanges(): void {\r\n        if (this.columnTemplates) {\r\n            this.columnTemplates.changes.pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n                this.markForCheck();\r\n                this.markTemplateContentCheck();\r\n            });\r\n        }\r\n\r\n        if (this.contextMenuTemplate) {\r\n            this.contextMenu.events.pipe(takeUntil(this.destroy$)).subscribe(() => this.detectChanges());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: lazy rendering of columns\r\n     */\r\n    private async asyncDrawColumns(columnList: string[]): Promise<void> {\r\n        for (let index: number = 0; index < columnList.length; index++) {\r\n            const key: string = columnList[index];\r\n            const schema: ColumnsSchema = this.mergeColumnSchema(key, index);\r\n\r\n            if (schema.isVisible) {\r\n                await this.utils.requestAnimationFrame(() => {\r\n                    this.processedColumnList && this.processedColumnList(schema, key, true);\r\n                });\r\n            } else {\r\n                this.processedColumnList(schema, key, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: sync rendering of columns\r\n     */\r\n    private async syncDrawColumns(columnList: string[]): Promise<void> {\r\n        await this.utils.microtask(() => {\r\n            for (let index: number = 0; index < columnList.length; index++) {\r\n                const key: string = columnList[index];\r\n                const schema: ColumnsSchema = this.mergeColumnSchema(key, index);\r\n                this.processedColumnList(schema, columnList[index], false);\r\n            }\r\n        });\r\n    }\r\n\r\n    private getCustomColumnSchemaByIndex(index: number): Partial<ColumnsSchema> {\r\n        return ((this.schemaColumns && this.schemaColumns[index]) || ({} as Any)) as Partial<ColumnsSchema>;\r\n    }\r\n\r\n    /**\r\n     * @description - it is necessary to combine the templates given from the server and default\r\n     * @param key - column schema from rendered templates map\r\n     * @param index - column position\r\n     */\r\n    private mergeColumnSchema(key: string, index: number): ColumnsSchema {\r\n        const customColumn: Partial<ColumnsSchema> = this.getCustomColumnSchemaByIndex(index);\r\n\r\n        if (!this.templateParser.compiledTemplates[key]) {\r\n            const column: NgxColumnComponent = new NgxColumnComponent().withKey(key);\r\n            this.templateParser.compileColumnMetadata(column);\r\n        }\r\n\r\n        const defaultColumn: ColumnsSchema = this.templateParser.compiledTemplates[key];\r\n\r\n        if (customColumn.key === defaultColumn.key) {\r\n            this.templateParser.compiledTemplates[key] = { ...defaultColumn, ...customColumn } as ColumnsSchema;\r\n        }\r\n\r\n        return this.templateParser.compiledTemplates[key];\r\n    }\r\n\r\n    /**\r\n     * @description: column meta information processing\r\n     * @param schema - column schema\r\n     * @param key - column name\r\n     * @param async - whether to draw a column asynchronously\r\n     */\r\n    private processedColumnList(schema: ColumnsSchema, key: string, async: boolean): void {\r\n        this.templateParser.schema.columns.push(this.templateParser.compiledTemplates[key]);\r\n        if (async) {\r\n            this.idleDetectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @description: notification that the table has been rendered\r\n     * @see TableBuilderComponent#isRendered\r\n     */\r\n    private emitRendered(): void {\r\n        this.isRendered = true;\r\n        this.rendering = false;\r\n        this.afterRendered.emit(this.isRendered);\r\n        this.recalculateHeight();\r\n    }\r\n\r\n    /**\r\n     * @description: parsing templates and input parameters (keys, schemaColumns) for the number of columns\r\n     */\r\n    private generateDisplayedColumns(): string[] {\r\n        let generatedList: string[] = [];\r\n        this.templateParser.initialSchema(this.columnOptions);\r\n        const { simpleRenderedKeys, allRenderedKeys }: TemplateKeys = this.parseTemplateKeys();\r\n\r\n        if (this.schemaColumns && this.schemaColumns.length) {\r\n            generatedList = this.schemaColumns.map((column: ColumnsSchema) => column.key);\r\n        } else if (this.keys.length) {\r\n            generatedList = this.customModelColumnsKeys;\r\n        } else if (simpleRenderedKeys.size) {\r\n            generatedList = allRenderedKeys;\r\n        } else {\r\n            generatedList = this.modelColumnKeys;\r\n        }\r\n\r\n        return generatedList;\r\n    }\r\n\r\n    /**\r\n     * @description: this method returns the keys by which to draw table columns\r\n     * <allowedKeyMap> - possible keys from the model, this must be checked,\r\n     * because users can draw the wrong keys in the template (ngx-column key=invalid)\r\n     */\r\n    private parseTemplateKeys(): TemplateKeys {\r\n        const allowedKeyMap: KeyMap<boolean> = this.keys.length\r\n            ? this.generateColumnsKeyMap(this.customModelColumnsKeys)\r\n            : this.generateColumnsKeyMap(this.modelColumnKeys);\r\n\r\n        this.templateParser.parse(allowedKeyMap, this.columnTemplates);\r\n\r\n        return {\r\n            allRenderedKeys: Array.from(this.templateParser.fullTemplateKeys),\r\n            overridingRenderedKeys: this.templateParser.overrideTemplateKeys,\r\n            simpleRenderedKeys: this.templateParser.templateKeys\r\n        };\r\n    }\r\n}\r\n","import { Directive, EventEmitter, Inject, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\n\r\nimport { OverloadScrollService } from '../services/overload-scroll/overload-scroll.service';\r\nimport { TableBuilderOptionsImpl } from '../config/table-builder-options';\r\nimport { NGX_TABLE_OPTIONS } from '../config/table-builder.tokens';\r\n\r\nconst { TIME_IDLE }: typeof TableBuilderOptionsImpl = TableBuilderOptionsImpl;\r\n\r\n@Directive({ selector: '[wheelThrottling]' })\r\nexport class WheelThrottlingDirective implements OnInit, OnDestroy {\r\n    @Input() public wheelThrottling: HTMLDivElement;\r\n    @Output() public scrollOffset: EventEmitter<boolean> = new EventEmitter();\r\n    public scrollTopOffset: boolean = false;\r\n    public isScrolling: number = null;\r\n    private scrolling: boolean = false;\r\n    private subscription: Subscription;\r\n\r\n    constructor(\r\n        @Inject(NGX_TABLE_OPTIONS) private readonly options: TableBuilderOptionsImpl,\r\n        private readonly ngZone: NgZone,\r\n        private readonly overload: OverloadScrollService\r\n    ) {}\r\n\r\n    private get element(): HTMLElement {\r\n        return this.wheelThrottling;\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        this.subscription = fromEvent(this.element, 'wheel').subscribe((event: WheelEvent): void =>\r\n            this.onElementScroll(event)\r\n        );\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.subscription.unsubscribe();\r\n        this.wheelThrottling = null;\r\n        this.scrollOffset = null;\r\n    }\r\n\r\n    /**\r\n     * Correct works only Chrome\r\n     * @param $event\r\n     */\r\n    public onElementScroll($event: WheelEvent): void {\r\n        this.scrollStart();\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            window.clearTimeout(this.isScrolling);\r\n            this.isScrolling = window.setTimeout(() => {\r\n                const isOffset: boolean = this.element.scrollTop > 0 && !this.scrollTopOffset;\r\n\r\n                if (isOffset) {\r\n                    this.scrollTopOffset = true;\r\n                    this.scrollOffset.emit(this.scrollTopOffset);\r\n                } else if (this.element.scrollTop === 0 && this.scrollTopOffset) {\r\n                    this.scrollTopOffset = false;\r\n                    this.scrollOffset.emit(this.scrollTopOffset);\r\n                }\r\n\r\n                this.scrollEnd();\r\n            }, TIME_IDLE);\r\n        });\r\n    }\r\n\r\n    private scrollStart(): void {\r\n        if (!this.scrolling) {\r\n            this.scrolling = true;\r\n            this.overload.scrollStatus.next(this.scrolling);\r\n        }\r\n    }\r\n\r\n    private scrollEnd(): void {\r\n        this.scrolling = false;\r\n        this.overload.scrollStatus.next(this.scrolling);\r\n    }\r\n}\r\n","import { Input } from '@angular/core';\r\nimport { ColumnsSchema, TableEvent, TableRow } from '../../interfaces/table-builder.external';\r\nimport { TableBrowserEvent } from '../../interfaces/table-builder.internal';\r\nimport { SelectionService } from '../../services/selection/selection.service';\r\nimport { UtilsService } from '../../services/utils/utils.service';\r\nimport { getDeepValue } from '../../operators/deep-value';\r\n\r\nexport class TableLineRow {\r\n    @Input('is-rendered') public isRendered: boolean;\r\n    @Input('column-index') public columnIndex: number;\r\n    @Input('client-row-height') public clientRowHeight: number;\r\n    @Input('column-schema') public columnSchema: ColumnsSchema;\r\n\r\n    constructor(public readonly selection: SelectionService, protected readonly utils: UtilsService) {}\r\n\r\n    public generateTableCellInfo(item: TableRow, key: string, $event: TableBrowserEvent): TableEvent {\r\n        return {\r\n            row: item,\r\n            event: $event,\r\n            value: getDeepValue(item, key),\r\n            preventDefault: (): void => {\r\n                window.clearInterval(this.selection.selectionTaskIdle);\r\n            }\r\n        };\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { TableLineRow } from '../common/table-line-row';\r\nimport { SelectionService } from '../../services/selection/selection.service';\r\nimport { KeyMap, ResizeEvent } from '../../interfaces/table-builder.internal';\r\nimport { SortOrderType } from '../../services/sortable/sortable.interfaces';\r\nimport { UtilsService } from '../../services/utils/utils.service';\r\nimport { FilterableService } from '../../services/filterable/filterable.service';\r\n\r\n@Component({\r\n    selector: 'table-thead',\r\n    templateUrl: './table-thead.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TableTheadComponent extends TableLineRow {\r\n    @Input('header-top') public headerTop: number;\r\n    @Input('sortable-definition') public sortableDefinition: KeyMap<SortOrderType>;\r\n    @Input('filterable-definition') public filterableDefinition: KeyMap<string>;\r\n    @Output() public resize: EventEmitter<ResizeEvent> = new EventEmitter();\r\n    @Output() public sortByKey: EventEmitter<string> = new EventEmitter();\r\n    public orderType: typeof SortOrderType = SortOrderType;\r\n\r\n    constructor(\r\n        public readonly selection: SelectionService,\r\n        protected readonly utils: UtilsService,\r\n        protected readonly filterable: FilterableService\r\n    ) {\r\n        super(selection, utils);\r\n    }\r\n\r\n    public openFilter(key: string, event: MouseEvent): void {\r\n        this.filterable.openFilter(key, event);\r\n    }\r\n}\r\n","import { VirtualScrollerComponent } from 'ngx-virtual-scroller';\r\nimport { filter, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    Inject,\r\n    Input,\r\n    NgZone,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    SimpleChanges,\r\n    ViewChild,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport { TableLineRow } from '../common/table-line-row';\r\nimport { TableClickEventEmitter, TableRow } from '../../interfaces/table-builder.external';\r\nimport { SelectionService } from '../../services/selection/selection.service';\r\nimport { NGX_TABLE_OPTIONS } from '../../config/table-builder.tokens';\r\nimport { TableBuilderOptionsImpl } from '../../config/table-builder-options';\r\nimport { Any, KeyMap, RecalculatedStatus } from '../../interfaces/table-builder.internal';\r\nimport { ContextMenuService } from '../../services/context-menu/context-menu.service';\r\nimport { NgxContextMenuComponent } from '../../components/ngx-context-menu/ngx-context-menu.component';\r\nimport { OverloadScrollService } from '../../services/overload-scroll/overload-scroll.service';\r\nimport { UtilsService } from '../../services/utils/utils.service';\r\nimport { detectChanges } from '../../operators/detect-changes';\r\n\r\n@Component({\r\n    selector: 'table-tbody',\r\n    templateUrl: './table-tbody.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TableTbodyComponent extends TableLineRow implements OnChanges, OnInit, OnDestroy {\r\n    @Input() public source: TableRow[];\r\n    @Input() public striped: boolean;\r\n    @Input('is-firefox') public isFirefox: boolean;\r\n    @Input() public recalculated: RecalculatedStatus;\r\n    @Input('primary-key') public primaryKey: string;\r\n    @Input('selection-entries') public selectionEntries: KeyMap<boolean>;\r\n    @Input('context-menu') public contextMenuTemplate: NgxContextMenuComponent;\r\n    @Input('enable-selection') public enableSelection: boolean;\r\n    @Input('table-viewport') public tableViewport: HTMLElement;\r\n    @Input('column-virtual-height') public columnVirtualHeight: number;\r\n    @Input('showed-cell-by-default') public showedCellByDefault: boolean;\r\n    @Input('buffer-amount') public bufferAmount: number;\r\n    @ViewChild('scroll', { static: true }) public scroll: VirtualScrollerComponent;\r\n    private destroy$: Subject<boolean> = new Subject<boolean>();\r\n    private reloadTaskId: number;\r\n\r\n    constructor(\r\n        public selection: SelectionService,\r\n        public cd: ChangeDetectorRef,\r\n        public contextMenu: ContextMenuService,\r\n        @Inject(NGX_TABLE_OPTIONS) private readonly options: TableBuilderOptionsImpl,\r\n        private readonly ngZone: NgZone,\r\n        protected readonly utils: UtilsService,\r\n        private readonly overload: OverloadScrollService\r\n    ) {\r\n        super(selection, utils);\r\n    }\r\n\r\n    public get clientBufferAmount(): number {\r\n        return Number(this.bufferAmount) || this.options.bufferAmount;\r\n    }\r\n\r\n    public get canSelectTextInTable(): boolean {\r\n        return !this.selection.selectionStart.status;\r\n    }\r\n\r\n    public ngOnChanges(changes: SimpleChanges): void {\r\n        if ('recalculated' in changes && !changes['recalculated'].firstChange && this.scroll) {\r\n            this.scroll.invalidateAllCachedMeasurements();\r\n        }\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        this.overload.scrollStatus\r\n            .pipe(\r\n                filter((scrolling: boolean) => !scrolling),\r\n                takeUntil(this.destroy$)\r\n            )\r\n            .subscribe(() => this.refresh());\r\n    }\r\n\r\n    /**\r\n     * @description: we hove some memory leak after destroy component\r\n     * because VirtualScrollerComponent work with requestAnimationFrame\r\n     * invalidate cache (VirtualScrollerComponent)\r\n     */\r\n    public ngOnDestroy(): void {\r\n        this.destroy$.next(true);\r\n        this.destroy$.unsubscribe();\r\n        const scroll: VirtualScrollerComponent & Any = this.scroll as Any;\r\n        scroll.removeScrollEventHandlers();\r\n        scroll.wrapGroupDimensions = null;\r\n        scroll.parentScroll = null;\r\n        scroll.viewPortItems = null;\r\n        scroll.items = null;\r\n        scroll['invalidateAllCachedMeasurements'] = (): void => {};\r\n        scroll['calculateViewport'] = (): Any => ({ startIndex: 0, scrollLength: 0 });\r\n        scroll['previousViewPort'] = { startIndex: 0, scrollLength: 0 };\r\n        scroll['invisiblePaddingElementRef'] = { nativeElement: null };\r\n        scroll['getScrollStartPosition'] = (): number => 0;\r\n        scroll['calculateDimensions'] = (): void => {};\r\n        scroll['refresh_internal'] = (): void => {};\r\n        scroll['element'] = { nativeElement: null };\r\n        scroll['contentElementRef'] = null;\r\n        scroll['_items'] = null;\r\n        scroll['zone'] = null;\r\n        this.destroy$ = null;\r\n        this.scroll = null;\r\n    }\r\n\r\n    public openContextMenu(event: MouseEvent, key: string, row: TableRow): void {\r\n        if (this.contextMenuTemplate) {\r\n            const selectOnlyUnSelectedRow: boolean = this.enableSelection && !this.checkSelectedItem(row);\r\n\r\n            if (selectOnlyUnSelectedRow) {\r\n                this.selection.selectRow(row, event, this.source);\r\n            }\r\n\r\n            this.contextMenu.openContextMenu(event, key, row);\r\n        }\r\n    }\r\n\r\n    public handleDblClick(row: TableRow, key: string, event: MouseEvent, emitter: TableClickEventEmitter): void {\r\n        window.clearInterval(this.selection.selectionTaskIdle);\r\n        this.handleEventEmitter(row, key, event, emitter);\r\n    }\r\n\r\n    public handleOnClick(row: TableRow, key: string, event: MouseEvent, emitter: TableClickEventEmitter): void {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            if (this.enableSelection) {\r\n                this.selection.selectionTaskIdle = window.setTimeout(() => {\r\n                    this.selection.selectRow(row, event, this.source);\r\n                    event.preventDefault();\r\n                    detectChanges(this.cd);\r\n                });\r\n            }\r\n        });\r\n\r\n        this.handleEventEmitter(row, key, event, emitter);\r\n    }\r\n\r\n    public vsChange(): void {\r\n        detectChanges(this.cd);\r\n    }\r\n\r\n    private refresh(): void {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            window.clearTimeout(this.reloadTaskId);\r\n            this.reloadTaskId = window.setTimeout(() => {\r\n                if (this.scroll) {\r\n                    this.scroll.invalidateAllCachedMeasurements();\r\n                    detectChanges(this.cd);\r\n                }\r\n            }, TableBuilderOptionsImpl.MACRO_TIME);\r\n        });\r\n    }\r\n\r\n    private handleEventEmitter(row: TableRow, key: string, event: MouseEvent, emitter: TableClickEventEmitter): void {\r\n        if (emitter) {\r\n            this.ngZone.runOutsideAngular(() => {\r\n                window.setTimeout(() => {\r\n                    emitter.emit(this.generateTableCellInfo(row, key, event));\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private checkSelectedItem(row: TableRow): boolean {\r\n        return this.selection.selectionModel.get(row[this.primaryKey]);\r\n    }\r\n}\r\n","import {\r\n    Directive,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    NgZone,\r\n    OnChanges,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport { Any, DynamicHeightOptions, Fn } from '../interfaces/table-builder.internal';\r\nimport { TableBuilderOptionsImpl } from '../config/table-builder-options';\r\n\r\ninterface BoxView {\r\n    paddingTop: string;\r\n    paddingBottom: string;\r\n}\r\n\r\n@Directive({ selector: '[autoHeight]' })\r\nexport class AutoHeightDirective implements OnInit, OnChanges, OnDestroy {\r\n    private static readonly DEFAULT_VALUE: number = 0;\r\n    private static readonly HEAD_TOP: string = '10px';\r\n    private static readonly DELAY: number = 100;\r\n\r\n    @Input() public headerHeight: number = 0;\r\n    @Input() public footerHeight: number = 0;\r\n    @Input() public autoHeight: Partial<DynamicHeightOptions> = {};\r\n    @Output() public recalculatedHeight: EventEmitter<void> = new EventEmitter();\r\n\r\n    private useOnlyAutoViewPort: boolean = false;\r\n    private isDirtyCheck: boolean;\r\n    private taskId: number;\r\n    private handler: Fn;\r\n\r\n    constructor(private readonly element: ElementRef, public readonly ngZone: NgZone) {}\r\n\r\n    private get height(): number {\r\n        return this.autoHeight.height;\r\n    }\r\n\r\n    private get canCalculated(): boolean {\r\n        return this.autoHeight.inViewport && this.autoHeight.sourceLength > 0;\r\n    }\r\n\r\n    private get style(): string {\r\n        let height: string;\r\n\r\n        if (this.height) {\r\n            height = `${this.height}px`;\r\n        } else if (this.autoHeight.detect) {\r\n            const paddingTop: string = AutoHeightDirective.getStyle(this.rootCurrentElement, 'padding-top');\r\n            const paddingBottom: string = AutoHeightDirective.getStyle(this.rootCurrentElement, 'padding-bottom');\r\n\r\n            if (this.useOnlyAutoViewPort && this.columnHeight > this.parentOffsetHeight) {\r\n                height = this.getHeightByViewPort({ paddingTop, paddingBottom });\r\n            } else if (this.parentOffsetHeight > this.columnHeight) {\r\n                height = this.getDefaultHeight();\r\n            } else if (!this.isEmptyParentHeight) {\r\n                height = this.getHeightByParent({ paddingTop, paddingBottom });\r\n            } else {\r\n                height = this.getHeightByViewPort({ paddingTop, paddingBottom });\r\n            }\r\n        }\r\n\r\n        return height ? `display: block; height: ${height}` : '';\r\n    }\r\n\r\n    private get isEmptyParentHeight(): boolean {\r\n        return this.parentOffsetHeight < parseInt(AutoHeightDirective.HEAD_TOP);\r\n    }\r\n\r\n    private get parentOffsetHeight(): number {\r\n        return this.rootCurrentElement.clientHeight || AutoHeightDirective.DEFAULT_VALUE;\r\n    }\r\n\r\n    private get currentElement(): HTMLDivElement {\r\n        return this.element.nativeElement;\r\n    }\r\n\r\n    private get childElement(): Partial<HTMLDivElement> {\r\n        return ((this.element.nativeElement as HTMLDivElement).firstChild as HTMLDivElement) || {};\r\n    }\r\n\r\n    private get rootCurrentElement(): Partial<HTMLElement> {\r\n        return (this.currentElement.parentNode && this.currentElement.parentNode.parentElement) || {};\r\n    }\r\n\r\n    private get columnHeight(): number {\r\n        return this.autoHeight.columnHeight || 0;\r\n    }\r\n\r\n    private get autoViewHeight(): number {\r\n        return document.body.clientHeight - this.currentElement.getBoundingClientRect().top;\r\n    }\r\n\r\n    private static getStyle(element: Element | Any, strCssRule: string): string {\r\n        let strValue: string = '';\r\n\r\n        if (document.defaultView && document.defaultView.getComputedStyle) {\r\n            try {\r\n                strValue = document.defaultView.getComputedStyle(element, '').getPropertyValue(strCssRule);\r\n            } catch (e) {\r\n                strValue = '0px';\r\n            }\r\n        } else if (element.currentStyle) {\r\n            strCssRule = strCssRule.replace(/\\-(\\w)/g, (strMatch: string, p1: string): string => p1.toUpperCase());\r\n            strValue = element.currentStyle[strCssRule];\r\n        }\r\n\r\n        return strValue;\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.handler = (): void => this.recalculateTableSize();\r\n            window.addEventListener('resize', this.handler, { passive: true });\r\n        });\r\n    }\r\n\r\n    public ngOnChanges(changes: SimpleChanges): void {\r\n        if ('autoHeight' in changes) {\r\n            this.recalculateTableSize();\r\n        }\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        window.removeEventListener('resize', this.handler);\r\n    }\r\n\r\n    public recalculateTableSize(): void {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            clearTimeout(this.taskId);\r\n            this.taskId = window.setTimeout(() => {\r\n                if (this.canCalculated && !this.isDirtyCheck) {\r\n                    this.markForCheck();\r\n                }\r\n\r\n                if (this.isDirtyCheck && this.autoHeight.inViewport) {\r\n                    this.calculateHeight();\r\n                    this.recalculatedHeight.emit();\r\n                }\r\n            }, AutoHeightDirective.DELAY);\r\n        });\r\n    }\r\n\r\n    public calculateHeight(): void {\r\n        if (this.canCalculated) {\r\n            this.setHeightByParent();\r\n        }\r\n    }\r\n\r\n    public markForCheck(): void {\r\n        this.isDirtyCheck = true;\r\n        if (this.parentOffsetHeight <= TableBuilderOptionsImpl.ROW_HEIGHT) {\r\n            this.useOnlyAutoViewPort = true;\r\n        }\r\n    }\r\n\r\n    private getDefaultHeight(): string {\r\n        const scrollbarHeight: number = this.childElement.offsetHeight - this.childElement.clientHeight || 0;\r\n        return `calc(${this.columnHeight + scrollbarHeight + this.headerHeight + this.footerHeight}px)`;\r\n    }\r\n\r\n    private getHeightByParent({ paddingTop, paddingBottom }: BoxView): string {\r\n        const viewportHeight: number = this.parentOffsetHeight - parseInt(AutoHeightDirective.HEAD_TOP);\r\n        return `calc(${viewportHeight}px - ${paddingTop} - ${paddingBottom})`;\r\n    }\r\n\r\n    private getHeightByViewPort({ paddingTop, paddingBottom }: BoxView): string {\r\n        const viewportHeight: number = this.autoViewHeight - parseInt(AutoHeightDirective.HEAD_TOP);\r\n        return this.columnHeight > viewportHeight\r\n            ? `calc(${viewportHeight}px - ${paddingTop} - ${paddingBottom})`\r\n            : this.getDefaultHeight();\r\n    }\r\n\r\n    private setHeightByParent(): void {\r\n        this.currentElement.setAttribute('style', this.style);\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Any, KeyMap } from '../interfaces/table-builder.internal';\r\nimport { checkValueIsEmpty } from '../operators/check-value-is-empty';\r\nimport { getDeepValue } from '../operators/deep-value';\r\n\r\n@Pipe({ name: 'deepPath', pure: true })\r\nexport class DeepPathPipe implements PipeTransform {\r\n    public transform(item: KeyMap, path: string): Any {\r\n        const result: Any = getDeepValue(item, path);\r\n        return checkValueIsEmpty(result) ? '-' : result;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Any, KeyMap } from '../interfaces/table-builder.internal';\r\nimport { checkValueIsEmpty } from '../operators/check-value-is-empty';\r\n\r\n@Pipe({ name: 'defaultValue', pure: true })\r\nexport class DefaultValuePipe implements PipeTransform {\r\n    public transform(item: KeyMap, key: string): Any {\r\n        const result: Any = item[key];\r\n        return checkValueIsEmpty(result) ? '-' : result;\r\n    }\r\n}\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    ChangeDetectorRef,\r\n    Component,\r\n    Input,\r\n    NgZone,\r\n    OnDestroy,\r\n    OnInit,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\n\r\nimport { SelectionService } from '../../services/selection/selection.service';\r\nimport { ImplicitContext, TableRow } from '../../interfaces/table-builder.external';\r\nimport { TableLineRow } from '../common/table-line-row';\r\nimport { UtilsService } from '../../services/utils/utils.service';\r\nimport { detectChanges } from '../../operators/detect-changes';\r\n\r\n@Component({\r\n    selector: 'table-cell',\r\n    templateUrl: './table-cell.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TableCellComponent extends TableLineRow implements OnInit, OnDestroy {\r\n    @Input() public item: TableRow;\r\n    @Input() public index: number;\r\n    @Input() public parent: HTMLDivElement;\r\n    @Input('is-filterable') public isFilterable: boolean;\r\n\r\n    public loaded: boolean;\r\n    private taskId: number;\r\n    public contextType: typeof ImplicitContext = ImplicitContext;\r\n\r\n    constructor(\r\n        public readonly cd: ChangeDetectorRef,\r\n        public readonly selection: SelectionService,\r\n        protected readonly utils: UtilsService,\r\n        private readonly ngZone: NgZone\r\n    ) {\r\n        super(selection, utils);\r\n        this.cd.reattach();\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        if (this.isRendered) {\r\n            this.loaded = true;\r\n        } else {\r\n            this.ngZone.runOutsideAngular(() => {\r\n                this.taskId = window.setTimeout(() => {\r\n                    this.loaded = true;\r\n                    detectChanges(this.cd);\r\n                }, this.index);\r\n            });\r\n        }\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        window.clearTimeout(this.taskId);\r\n    }\r\n}\r\n","import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output } from '@angular/core';\r\n\r\n@Directive({ selector: '[observerView]' })\r\nexport class ObserverViewDirective implements AfterViewInit, OnDestroy {\r\n    private static readonly MIN_TIME_IDLE: number = 120;\r\n    @Output() public observeVisible: EventEmitter<boolean> = new EventEmitter();\r\n    @Input('rendered') public isRendered: boolean;\r\n    private observer: IntersectionObserver = null;\r\n    private previousRation: number = 0.0;\r\n    private frameId: number;\r\n\r\n    constructor(private element: ElementRef, private readonly ngZone: NgZone) {}\r\n\r\n    public ngAfterViewInit(): void {\r\n        this.observer = new IntersectionObserver(\r\n            (entries: IntersectionObserverEntry[]): void => {\r\n                entries.forEach((entry: IntersectionObserverEntry) => {\r\n                    this.ngZone.runOutsideAngular(() => {\r\n                        const isVisible: boolean =\r\n                            entry.intersectionRatio > this.previousRation || entry.isIntersecting;\r\n\r\n                        if (this.isRendered) {\r\n                            clearTimeout(this.frameId);\r\n                            this.frameId = window.setTimeout(() => {\r\n                                this.observeVisible.emit(isVisible);\r\n                            }, ObserverViewDirective.MIN_TIME_IDLE);\r\n                        } else {\r\n                            window.requestAnimationFrame(() => this.observeVisible.emit(isVisible));\r\n                        }\r\n                    });\r\n\r\n                    this.previousRation = entry.intersectionRatio;\r\n                });\r\n            },\r\n            {\r\n                root: null,\r\n                rootMargin: '0px 0px 0px 0px',\r\n                threshold: [0]\r\n            }\r\n        );\r\n\r\n        this.observer.observe(this.element.nativeElement);\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.element = { nativeElement: null };\r\n        clearTimeout(this.frameId);\r\n        this.observer.disconnect();\r\n    }\r\n}\r\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ContextMenuService } from '../../../services/context-menu/context-menu.service';\nimport { ContextMenuState } from '../../../services/context-menu/context-menu.interface';\nimport { ContextItemEvent } from '../../../interfaces/table-builder.external';\nimport { UtilsService } from '../../../services/utils/utils.service';\nimport { Subscription } from 'rxjs';\nimport { detectChanges } from '../../../operators/detect-changes';\n\n@Component({\n    selector: 'ngx-context-menu-item',\n    templateUrl: './ngx-context-menu-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxContextMenuItemComponent implements OnInit, OnDestroy {\n    private static readonly MIN_PADDING: number = 25;\n    @Input() public visible: boolean = true;\n    @Input() public contextTitle: boolean = null;\n    @Input() public disable: boolean = false;\n    @Input() public divider: boolean = false;\n    @Input('disable-sub-menu') public disableSubMenu: boolean = false;\n    @Input('sub-menu-width') public subMenuWidth: number = 300;\n    @Output() public onClick: EventEmitter<ContextItemEvent> = new EventEmitter();\n    @ViewChild('item', { static: false }) public itemRef: ElementRef<HTMLDivElement>;\n    public offsetX: number = null;\n    public offsetY: number = null;\n    private subscription: Subscription;\n    private taskId: number;\n\n    constructor(\n        private readonly contextMenu: ContextMenuService,\n        private readonly cd: ChangeDetectorRef,\n        private readonly utils: UtilsService,\n        private readonly ngZone: NgZone\n    ) {}\n\n    public get state(): Partial<ContextMenuState> {\n        return this.contextMenu.state;\n    }\n\n    public get clientRect(): Partial<ClientRect | DOMRect> {\n        return (this.itemElement.getBoundingClientRect && this.itemElement.getBoundingClientRect()) || {};\n    }\n\n    private get itemElement(): Partial<HTMLDivElement> {\n        return (this.itemRef && this.itemRef.nativeElement) || {};\n    }\n\n    public ngOnInit(): void {\n        this.subscription = this.contextMenu.events.subscribe(() => detectChanges(this.cd));\n    }\n\n    public ngOnDestroy(): void {\n        this.itemRef = null;\n        this.subscription.unsubscribe();\n    }\n\n    public calculateSubMenuPosition(ref: HTMLDivElement): void {\n        const contentExist: boolean = ref.innerHTML.trim().length !== 0;\n        if (contentExist) {\n            this.offsetX = this.clientRect.left + this.subMenuWidth - NgxContextMenuItemComponent.MIN_PADDING;\n            this.offsetX = this.offsetX - this.overflowX();\n\n            this.offsetY = this.clientRect.top - NgxContextMenuItemComponent.MIN_PADDING;\n            this.offsetY = this.offsetY - this.overflowY(ref);\n        }\n    }\n\n    public overflowX(): number {\n        const overflowX: number = this.subMenuWidth + this.offsetX - this.utils.bodyRect.width;\n        return overflowX > 0 ? overflowX + UtilsService.SCROLLBAR_WIDTH : 0;\n    }\n\n    public overflowY(ref: HTMLDivElement): number {\n        const overflowY: number = ref.offsetHeight + this.offsetY - this.utils.bodyRect.height;\n        return overflowY > 0 ? overflowY + UtilsService.SCROLLBAR_WIDTH : 0;\n    }\n\n    public emitClick(event: MouseEvent): void {\n        if (!this.disable) {\n            this.deferCloseMenu();\n\n            this.onClick.emit({\n                preventDefault: (): void => {\n                    window.clearTimeout(this.taskId);\n                }\n            });\n\n            event.stopPropagation();\n        }\n    }\n\n    private deferCloseMenu(): void {\n        this.ngZone.runOutsideAngular(() => {\n            this.taskId = window.setTimeout(() => {\n                this.contextMenu.close();\n            });\n        });\n    }\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'ngx-context-menu-divider',\n    template: '<div class=\"context-menu__divider\"></div>',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxContextMenuDividerComponent {}\n","import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'ngx-menu-content',\n    templateUrl: './ngx-menu-content.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxMenuContentComponent {\n    @Input() public icon: string = null;\n    @Input('no-margin') public noMargin: boolean = null;\n    @Input('align-center') public alignCenter: boolean = null;\n\n    @HostBinding('class')\n    public get class(): string {\n        const cssClasses: string = `${this.noMargin !== null ? 'content-phrase' : ''}`;\n        return this.icon !== null ? `icon-place ${cssClasses}` : cssClasses;\n    }\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'ngx-empty',\n    template: '<ng-content></ng-content>',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxEmptyComponent {}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\nimport { TableBuilderOptionsImpl } from '../../config/table-builder-options';\nimport { FilterableService } from '../../services/filterable/filterable.service';\nimport { FilterEvent, TableFilterType } from '../../services/filterable/filterable.interface';\nimport { detectChanges } from '../../operators/detect-changes';\n\nconst { TIME_RELOAD }: typeof TableBuilderOptionsImpl = TableBuilderOptionsImpl;\n\n@Component({\n    selector: 'ngx-filter-viewer',\n    template: '<span [class.filter-founded]=\"founded\" [innerHTML]=\"html\"></span>',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxFilterViewerComponent implements OnChanges, OnInit, OnDestroy {\n    @Input() public text: string = null;\n    @Input() public key: string = null;\n    @Input() public index: number = 0;\n    public html: string | SafeHtml;\n    public founded: boolean = false;\n    private subscription: Subscription;\n    private taskId: number;\n\n    constructor(\n        private readonly ngZone: NgZone,\n        private readonly cd: ChangeDetectorRef,\n        private readonly sanitizer: DomSanitizer,\n        private readonly filterable: FilterableService\n    ) {\n        this.cd.reattach();\n    }\n\n    private static wrapSelectedHtml(finder: string): string {\n        return `<span style=\"background-color: #FFFF00; color: #000\">${finder}</span>`;\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes['text'] && changes['text'].firstChange) {\n            this.defaultHtmlValue();\n        }\n    }\n\n    public ngOnInit(): void {\n        this.subscription = this.filterable.events.subscribe((event: FilterEvent) => {\n            if (this.filterable.definition[this.key] || this.filterable.globalFilterValue) {\n                this.changeSelection(event);\n            } else {\n                this.defaultHtmlValue();\n            }\n\n            detectChanges(this.cd);\n        });\n    }\n\n    public ngOnDestroy(): void {\n        this.subscription.unsubscribe();\n    }\n\n    private changeSelection(event: FilterEvent): void {\n        this.ngZone.runOutsideAngular(() => {\n            window.clearInterval(this.taskId);\n            this.taskId = window.setTimeout(() => {\n                if (event.value || this.filterable.definition[this.key]) {\n                    this.selected(event);\n                } else {\n                    this.defaultHtmlValue();\n                }\n\n                detectChanges(this.cd);\n            }, TIME_RELOAD + this.index);\n        });\n    }\n\n    private selected(event: FilterEvent): void {\n        const value: string = this.filterable.definition[this.key] || event.value;\n        const type: TableFilterType = this.filterable.definition[this.key]\n            ? this.filterable.filterTypeDefinition[this.key]\n            : event.type;\n\n        if (type === TableFilterType.DOES_NOT_EQUAL || type === TableFilterType.DOES_NOT_CONTAIN) {\n            return;\n        }\n\n        let regexp: RegExp;\n        const escapedValue: string = value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\n        if (type === TableFilterType.START_WITH) {\n            regexp = new RegExp(`^${escapedValue}`, 'i');\n        } else if (type === TableFilterType.END_WITH) {\n            regexp = new RegExp(`${escapedValue}$`, 'i');\n        } else if (type === TableFilterType.EQUALS) {\n            regexp = new RegExp(`^${escapedValue}$`, 'i');\n        } else {\n            regexp = new RegExp(`${escapedValue}`, 'ig');\n        }\n\n        const trustedHtml: string = String(this.text).replace(regexp, (finder: string) =>\n            NgxFilterViewerComponent.wrapSelectedHtml(finder)\n        );\n\n        this.html = this.sanitizer.bypassSecurityTrustHtml(trustedHtml);\n\n        if (trustedHtml.includes('span')) {\n            this.founded = true;\n        }\n    }\n\n    private defaultHtmlValue(): void {\n        this.html = this.text;\n        this.founded = false;\n    }\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'drag-icon',\n    templateUrl: './drag-icon.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DragIconComponent {}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n    selector: 'ngx-source-null',\n    template: '<ng-content></ng-content>',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxSourceNullComponent {}\n","import { AfterViewInit, Directive, Input, NgZone, OnDestroy } from '@angular/core';\nimport { fromEvent, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({ selector: '[overflowTooltip]' })\nexport class OverflowTooltipDirective implements AfterViewInit, OnDestroy {\n    @Input('overflowTooltip') public element: HTMLDivElement = null;\n    @Input('parent') public parent: HTMLDivElement = null;\n    @Input('text-center') public textCenter: boolean = null;\n    private destroy$: Subject<boolean> = new Subject<boolean>();\n\n    /**\n     * Minimal time before show tooltip\n     */\n    private readonly timeIdle: number = 500;\n    private readonly overflowSelector: string = 'table-grid__cell-overflow-content';\n    private frameId: number = null;\n\n    constructor(private ngZone: NgZone) {}\n\n    private get overflowContentElem(): HTMLDivElement {\n        return document.querySelector(`.${this.overflowSelector}`);\n    }\n\n    private static checkOverflow(element: HTMLDivElement, parent: HTMLDivElement): boolean {\n        return (\n            element.offsetWidth > parent.offsetWidth ||\n            element.offsetHeight > parent.offsetHeight ||\n            element.scrollWidth > element.offsetWidth ||\n            element.scrollHeight > element.offsetHeight\n        );\n    }\n\n    public ngAfterViewInit(): void {\n        fromEvent(this.element, 'mouseenter')\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(() => this.detectCheckOverflow());\n        fromEvent(this.element, 'mouseleave')\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(() => {\n                clearInterval(this.frameId);\n            });\n    }\n\n    /**\n     * fix problem with memory leak\n     */\n    public ngOnDestroy(): void {\n        clearInterval(this.frameId);\n        this.removeElement();\n        this.destroy$.next(true);\n        this.destroy$.unsubscribe();\n        this.ngZone = null;\n        this.element = null;\n        this.parent = null;\n        this.destroy$ = null;\n    }\n\n    private detectCheckOverflow(): void {\n        clearInterval(this.frameId);\n        this.ngZone.runOutsideAngular(() => {\n            this.frameId = window.setTimeout(() => {\n                const isOverflow: boolean = OverflowTooltipDirective.checkOverflow(this.element, this.parent);\n                if (isOverflow) {\n                    this.showTooltip();\n                }\n            }, this.timeIdle);\n        });\n    }\n\n    private showTooltip(): void {\n        if (this.overflowContentElem) {\n            this.removeElement();\n            return;\n        }\n\n        const elem: HTMLDivElement = document.createElement('div');\n        const rect: ClientRect | DOMRect = this.element.getBoundingClientRect();\n        elem.classList.add(this.overflowSelector, this.textCenter ? 'text-center' : '');\n        elem.style.cssText = `left: ${rect.left}px; top: ${rect.top}px`;\n        document.body.appendChild(elem);\n\n        this.ngZone.runOutsideAngular(() => {\n            window.setTimeout(() => {\n                if (this.overflowContentElem) {\n                    this.overflowContentElem.classList.add('visible');\n                    this.overflowContentElem.innerHTML = this.element.innerHTML.trim().replace(/<!--.*?-->/g, '');\n\n                    fromEvent(this.overflowContentElem, 'mouseleave')\n                        .pipe(takeUntil(this.destroy$))\n                        .subscribe(() => this.removeElement());\n                }\n            });\n        });\n    }\n\n    private removeElement(): void {\n        if (this.overflowContentElem) {\n            this.overflowContentElem.parentNode.removeChild(this.overflowContentElem);\n        }\n    }\n}\n","import { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { VirtualScrollerModule } from 'ngx-virtual-scroller';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { NGX_TABLE_OPTIONS } from './table/config/table-builder.tokens';\r\nimport { TableBuilderComponent } from './table/table-builder.component';\r\nimport { WheelThrottlingDirective } from './table/directives/wheel.directive';\r\nimport { TableTheadComponent } from './table/components/table-thead/table-thead.component';\r\nimport { TableTbodyComponent } from './table/components/table-tbody/table-tbody.component';\r\nimport { AutoHeightDirective } from './table/directives/auto-height.directive';\r\nimport { NgxColumnComponent } from './table/components/ngx-column/ngx-column.component';\r\nimport { TableBuilderOptions } from './table/interfaces/table-builder.external';\r\nimport { TemplateHeadThDirective } from './table/directives/rows/template-head-th.directive';\r\nimport { TemplateBodyTdDirective } from './table/directives/rows/template-body-td.directive';\r\nimport { DeepPathPipe } from './table/pipes/deep-path.pipe';\r\nimport { UtilsService } from './table/services/utils/utils.service';\r\nimport { TableBuilderOptionsImpl } from './table/config/table-builder-options';\r\nimport { DefaultValuePipe } from './table/pipes/default-value.pipe';\r\nimport { NgxOptionsComponent } from './table/components/ngx-options/ngx-options.component';\r\nimport { WebWorkerThreadService } from './table/worker/worker-thread.service';\r\nimport { TableCellComponent } from './table/components/table-cell/table-cell.component';\r\nimport { ObserverViewDirective } from './table/directives/observer-view.directive';\r\nimport { NgxContextMenuComponent } from './table/components/ngx-context-menu/ngx-context-menu.component';\r\nimport { NgxContextMenuItemComponent } from './table/components/ngx-context-menu/ngx-context-menu-item/ngx-context-menu-item.component';\r\nimport { NgxContextMenuDividerComponent } from './table/components/ngx-context-menu/ngx-context-menu-divider/ngx-context-menu-divider.component';\r\nimport { NgxMenuContentComponent } from './table/components/ngx-context-menu/ngx-context-menu-item/ngx-menu-content-place/ngx-menu-content.component';\r\nimport { NgxEmptyComponent } from './table/components/ngx-empty/ngx-empty.component';\r\nimport { NgxHeaderComponent } from './table/components/ngx-header/ngx-header.component';\r\nimport { NgxFooterComponent } from './table/components/ngx-footer/ngx-footer.component';\r\nimport { NgxFilterViewerComponent } from './table/components/ngx-filter-viewer/ngx-filter-viewer.component';\r\nimport { NgxFilterComponent } from './table/components/ngx-filter/ngx-filter.component';\r\nimport { NgxFilterDirective } from './table/directives/ngx-filter.directive';\r\nimport { DragIconComponent } from './table/components/drag-icon/drag-icon.component';\r\nimport { NgxSourceNullComponent } from './table/components/ngx-source-null/ngx-source-null.component';\r\nimport { OverflowTooltipDirective } from './table/directives/overflow-tooltip.directive';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, VirtualScrollerModule, DragDropModule],\r\n    declarations: [\r\n        TableBuilderComponent,\r\n        WheelThrottlingDirective,\r\n        AutoHeightDirective,\r\n        TableTheadComponent,\r\n        TableTbodyComponent,\r\n        NgxColumnComponent,\r\n        TemplateHeadThDirective,\r\n        TemplateBodyTdDirective,\r\n        DeepPathPipe,\r\n        DefaultValuePipe,\r\n        NgxOptionsComponent,\r\n        TableCellComponent,\r\n        ObserverViewDirective,\r\n        NgxContextMenuComponent,\r\n        NgxContextMenuItemComponent,\r\n        NgxContextMenuDividerComponent,\r\n        NgxMenuContentComponent,\r\n        NgxEmptyComponent,\r\n        NgxHeaderComponent,\r\n        NgxFooterComponent,\r\n        NgxFilterViewerComponent,\r\n        NgxFilterComponent,\r\n        NgxFilterDirective,\r\n        DragIconComponent,\r\n        NgxSourceNullComponent,\r\n        OverflowTooltipDirective\r\n    ],\r\n    providers: [UtilsService, WebWorkerThreadService],\r\n    exports: [\r\n        TableBuilderComponent,\r\n        TemplateHeadThDirective,\r\n        TemplateBodyTdDirective,\r\n        NgxColumnComponent,\r\n        NgxOptionsComponent,\r\n        NgxContextMenuComponent,\r\n        NgxContextMenuItemComponent,\r\n        NgxContextMenuDividerComponent,\r\n        NgxMenuContentComponent,\r\n        NgxEmptyComponent,\r\n        NgxHeaderComponent,\r\n        NgxFooterComponent,\r\n        NgxFilterViewerComponent,\r\n        NgxFilterComponent,\r\n        NgxFilterDirective,\r\n        NgxSourceNullComponent\r\n    ]\r\n})\r\nexport class TableBuilderModule {\r\n    private static readonly ROOT_OPTIONS: InjectionToken<string> = new InjectionToken<string>('NGX_TABLE_OPTIONS');\r\n\r\n    public static forRoot(config: Partial<TableBuilderOptions> = {}): ModuleWithProviders {\r\n        return {\r\n            ngModule: TableBuilderModule,\r\n            providers: [\r\n                {\r\n                    provide: TableBuilderModule.ROOT_OPTIONS,\r\n                    useValue: config\r\n                },\r\n                {\r\n                    provide: NGX_TABLE_OPTIONS,\r\n                    useFactory: TableBuilderModule.loggerConfigFactory,\r\n                    deps: [TableBuilderModule.ROOT_OPTIONS]\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    private static loggerConfigFactory(config: Partial<TableBuilderOptions>): TableBuilderOptions {\r\n        return Object.assign(new TableBuilderOptionsImpl(), config);\r\n    }\r\n}\r\n","import { TableRow } from '../interfaces/table-builder.external';\r\nimport { Any } from '../interfaces/table-builder.internal';\r\n\r\nexport function shallowUpdateRow(data: TableRow[], row: TableRow, key: string, value: Any): TableRow[] {\r\n    const index: number = data.indexOf(row);\r\n    return [...data.slice(0, index), { ...data[index], [key]: value }, ...data.slice(index + 1, data.length)];\r\n}\r\n"]}