import { ApplicationRef, NgZone } from '@angular/core';
import { Subject } from 'rxjs';
import { WebWorkerThreadService } from '../../worker/worker-thread.service';
import { UtilsService } from '../utils/utils.service';
import { TableRow } from '../../interfaces/table-builder.external';
import { FilterEvent, FilterStateEvent, TableFilterType, FilterWorkerEvent } from './filterable.interface';
import { KeyMap } from '../../interfaces/table-builder.internal';
export declare class FilterableService {
    private readonly thread;
    private readonly utils;
    private readonly ngZone;
    private readonly app;
    filterValue: string;
    definition: KeyMap<string>;
    state: FilterStateEvent;
    types: typeof TableFilterType;
    readonly filterOpenEvents: Subject<void>;
    readonly events: Subject<FilterEvent>;
    filterType: TableFilterType;
    filterTypeDefinition: KeyMap<TableFilterType>;
    filtering: boolean;
    private previousFiltering;
    constructor(thread: WebWorkerThreadService, utils: UtilsService, ngZone: NgZone, app: ApplicationRef);
    readonly globalFilterValue: string;
    changeFilteringStatus(): void;
    readonly filterValueExist: boolean;
    openFilter(key: string, event: MouseEvent): void;
    closeFilter(): void;
    filter(source: TableRow[]): Promise<FilterWorkerEvent>;
    private checkIsEmpty;
}
